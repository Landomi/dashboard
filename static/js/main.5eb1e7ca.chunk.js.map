{"version":3,"sources":["utils/utils.ts","views/Home/Home.tsx","components/ToggleButtons/ToggleButtons.tsx","views/NFT/NFT.tsx","Routes.tsx","App.tsx","index.jsx"],"names":["EthereumContext","createContext","AccountContext","EMPTY_FUNCTION","validatePositiveInteger","raw","value","BigInt","String","_","updateAmountByStr","setter","To","address","amount","this","TOKENS","id","name","decimal","CONTRACT_ABIS","inputs","internalType","type","outputs","stateMutability","ERC20_ABIS","constant","payable","approve","web3","index","from","sender","Promise","resolve","eth","Contract","methods","send","SENDER","airdrop","toList","defaultAmount","unit","progressSetter","limit","contractInstance","defaultTo","Array","filter","to","explicitedTo","explicitedToAmount","airdrops","progress","length","i","toSlice","slice","push","airDropBatch","then","amountSlice","map","v","assert","airDropIndividual","all","Home","ethereum","useContext","Web3","account","useState","selectedToken","setSelectedToken","allowanceAmount","setAllowanceAmount","setDefaultAmount","addressesPerTransaction","setAddressesPerTransaction","setToList","isApproving","setIsApproving","isGiving","setIsGiving","isUpdatingAllowance","setIsUpdatingAllowance","givedAddresses","setGivedAddresses","amountUnit","setAmountUnit","updateAllowance","owner","allowance","call","getAllowance","useEffect","isDefaultAmountNeeded","some","isDefaultAmountInvalid","canGive","Container","className","Row","InputGroup","hasValidation","Form","Control","as","onChange","e","previousAddress","replaceAll","trim","split","every","startsWith","parseAddresses","currentTarget","isInvalid","Feedback","Col","xs","ButtonGroup","ToggleButton","variant","checked","Number","Spinner","animation","size","role","md","Text","placeholder","Button","onClick","a","disabled","utils","isAddress","Table","ToggleButtons","selects","groupName","selectedId","setSelectedId","changeId","select","find","s","NFTS","QUALITIES","INTENTIONS","airdropMaintainer","quality","intention","level","forgeMaintainer","airdropCaptainMaintainer","forgeCaptainMaintainer","NFT","selectedNFT","setSelectedNFT","selectedQuality","setSelectedQuality","selectedIntention","setSelectedIntention","setLevel","Routes","path","ERROR_NETWORK_NOT_ADDED","CHAIN_ID","switchToChain","request","method","params","chainId","code","switched","chainName","nativeCurrency","symbol","decimals","rpcUrls","blockExplorerUrls","App","setEthereum","setAccount","isOnChain","setIsOnChain","detectEthereumProvider","provider","updateSelectedAccount","useCallback","selectedAddress","on","removeListener","prepareChain","Provider","Navbar","Nav","Brand","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5eb1e7ca.chunk.js","sourcesContent":["import { createContext, useEffect } from \"react\";\n\nimport { BaseProvider } from \"@metamask/providers\";\n\nexport const EthereumContext = createContext<BaseProvider | null>(null);\n\nexport const AccountContext = createContext<string | null>(null);\n\nexport function useMountState(callback: () => void): void {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(callback, []);\n}\n\nexport function EMPTY_FUNCTION(): void { /* ignore promise handling */ }\n\nexport function validatePositiveInteger(raw: string): bigint | null {\n  try {\n    const value = BigInt(raw);\n    if (String(value) === raw && value > 0) {\n      return value;\n    }\n  } catch (_) { /* do nothing */ }\n  return null;\n}\n\nexport function updateAmountByStr(raw: string, setter: (_: string) => void): void {\n  if (raw === \"\" || validatePositiveInteger(raw) !== null) {\n    setter(raw);\n  }\n}\n","import \"./Home.scss\";\n\nimport React, {\n  useState,\n  useContext,\n  useEffect,\n} from \"react\";\nimport Web3 from \"web3\";\nimport { AbiItem } from \"web3-utils\";\nimport assert from \"assert\";\n\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Row from \"react-bootstrap/Row\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Table from \"react-bootstrap/Table\";\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\n\nimport { BaseProvider } from \"@metamask/providers\";\n\nimport {\n  EthereumContext, AccountContext, EMPTY_FUNCTION, updateAmountByStr, validatePositiveInteger,\n} from \"../../utils/utils\";\n\nclass To {\n  address: string;\n\n  amount: bigint | null;\n\n  constructor(address: string, amount: bigint | null) {\n    this.address = address;\n    this.amount = amount;\n  }\n}\n\nfunction parseAddresses(raw: string): To[] | null {\n  const toList: To[] = [];\n  let previousAddress: To | null = null;\n\n  const isValid = raw\n    .replaceAll(\",\", \" \")\n    .replaceAll(\"\\n\", \" \")\n    .replaceAll('\"', \"\")\n    .replaceAll(\"'\", \"\")\n    .replaceAll(\"`\", \"\")\n    .replaceAll(/  */g, \" \")\n    .trim()\n    .split(\" \")\n    .every((value) => {\n      if (value.startsWith(\"0x\")) {\n        previousAddress = new To(value, null);\n        toList.push(previousAddress);\n      } else if (validatePositiveInteger(value)) {\n        if (previousAddress === null || previousAddress.amount !== null) {\n          return false;\n        }\n        previousAddress.amount = BigInt(value);\n      } else {\n        return false;\n      }\n      return true;\n    });\n\n  if (isValid) {\n    return toList;\n  }\n\n  return null;\n}\n\nconst TOKENS = [\n  {\n    id: 0,\n    name: \"Celt\",\n    address: \"0x5Ab622494AB7C5e81911558c9552DBd517F403fb\",\n    decimal: 18,\n  },\n  {\n    id: 1,\n    name: \"Crystal\",\n    address: \"0xBD87c06D865a3717A16041aCD8d33922e60E85CE\",\n    decimal: 18,\n  },\n  {\n    id: 2,\n    name: \"CeltChest\",\n    address: \"0x777c5a7152F999B4bBC26295C65a0ACb066f75e9\",\n    decimal: 0,\n  },\n];\n\nconst CONTRACT_ABIS = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"erc20Token\", type: \"address\" },\n      { internalType: \"address[]\", name: \"targets\", type: \"address[]\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n    ],\n    name: \"airDropBatch\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"erc20Token\", type: \"address\" },\n      { internalType: \"address[]\", name: \"targets\", type: \"address[]\" },\n      { internalType: \"uint256[]\", name: \"amounts\", type: \"uint256[]\" },\n    ],\n    name: \"airDropIndividual\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst ERC20_ABIS = [\n  {\n    constant: true,\n    inputs: [{ name: \"_owner\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ name: \"balance\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: \"_spender\", type: \"address\" },\n      { name: \"_value\", type: \"uint256\" },\n    ],\n    name: \"approve\",\n    outputs: [{ name: \"\", type: \"bool\" }],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      { name: \"_owner\", type: \"address\" },\n      { name: \"_spender\", type: \"address\" },\n    ],\n    name: \"allowance\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nfunction getAllowance(\n  web3: Web3,\n  index: number,\n  owner: string | null,\n  sender: string,\n): Promise<number> {\n  if (!owner) {\n    return Promise.resolve(0);\n  }\n\n  const { address } = TOKENS[index];\n\n  const erc20Contract = new web3.eth.Contract(ERC20_ABIS as AbiItem[], address);\n\n  // eslint-disable-next-line\n  return erc20Contract.methods.allowance(owner, sender).call();\n}\n\nfunction approve(\n  web3: Web3,\n  index: number,\n  from: string | null,\n  sender: string,\n  amount: bigint,\n): Promise<void> {\n  if (!from) {\n    return Promise.resolve();\n  }\n\n  const { address } = TOKENS[index];\n\n  const erc20Contract = new web3.eth.Contract(ERC20_ABIS as AbiItem[], address);\n\n  // eslint-disable-next-line\n  return erc20Contract.methods.approve(sender, amount).send({ from });\n}\n\nconst SENDER = \"0x074101c52ea69D66577057ECA07147bcF7B3f057\";\n\nfunction airdrop(\n  web3: Web3,\n  index: number,\n  from: string | null,\n  toList: To[] | null,\n  defaultAmount: bigint,\n  unit: bigint,\n  progressSetter: (_: number) => void,\n  limit: number,\n): Promise<void> {\n  if (!from || !toList) {\n    return Promise.resolve();\n  }\n\n  const { address } = TOKENS[index];\n\n  const contractInstance = new web3.eth.Contract(CONTRACT_ABIS as AbiItem[], SENDER);\n\n  const defaultTo = Array.from(\n    toList.filter((to) => to.amount === null),\n    (to) => to.address,\n  );\n  const explicitedTo = Array.from(\n    toList.filter((to) => to.amount !== null),\n    (to) => to.address,\n  );\n  const explicitedToAmount = Array.from(\n    toList.filter((to) => to.amount !== null),\n    (to) => to.amount,\n  );\n\n  const airdrops = [];\n  let progress = 0;\n  if (defaultTo.length !== 0) {\n    for (let i = 0; i < defaultTo.length; i += limit) {\n      const toSlice = defaultTo.slice(i, i + limit);\n      airdrops.push(\n        // eslint-disable-next-line\n        contractInstance.methods\n          .airDropBatch(address, toSlice, defaultAmount * unit)\n          .send({ from })\n          // eslint-disable-next-line\n          .then(() => {\n            progress += toSlice.length;\n            progressSetter(progress);\n          }),\n      );\n    }\n  }\n\n  if (explicitedTo.length !== 0) {\n    for (let i = 0; i < explicitedTo.length; i += limit) {\n      const toSlice = explicitedTo.slice(i, i + limit);\n      const amountSlice = explicitedToAmount\n        .slice(i, i + limit)\n        .map((v: bigint | null) => {\n          assert(v);\n          return v * unit;\n        });\n      airdrops.push(\n        // eslint-disable-next-line\n        contractInstance.methods\n          .airDropIndividual(address, toSlice, amountSlice)\n          .send({ from })\n          // eslint-disable-next-line\n          .then(() => {\n            progress += toSlice.length;\n            progressSetter(progress);\n          }),\n      );\n    }\n  }\n\n  return Promise.all(airdrops).then(EMPTY_FUNCTION);\n}\n\nexport default function Home(): React.ReactElement {\n  const ethereum = useContext<BaseProvider | null>(EthereumContext);\n  assert(ethereum);\n  // eslint-disable-next-line\n  const web3 = new Web3(ethereum as any);\n  const account = useContext<string | null>(AccountContext);\n\n  const [selectedToken, setSelectedToken] = useState(0);\n  const [allowanceAmount, setAllowanceAmount] = useState<bigint>(BigInt(0));\n  const [defaultAmount, setDefaultAmount] = useState(\"\");\n  const [addressesPerTransaction, setAddressesPerTransaction] = useState(\"200\");\n  const [toList, setToList] = useState<To[] | null>(null);\n  const [isApproving, setIsApproving] = useState(false);\n  const [isGiving, setIsGiving] = useState(false);\n  const [isUpdatingAllowance, setIsUpdatingAllowance] = useState(false);\n  const [givedAddresses, setGivedAddresses] = useState(0);\n  const [amountUnit, setAmountUnit] = useState(\"\");\n\n  function updateAllowance() {\n    setIsUpdatingAllowance(true);\n    getAllowance(web3, selectedToken, account, SENDER)\n      .then((amount: number) => {\n        setAllowanceAmount(BigInt(amount));\n        setIsUpdatingAllowance(false);\n      }, EMPTY_FUNCTION);\n  }\n  useEffect(\n    () => {\n      updateAllowance();\n      setAmountUnit(`${10 ** TOKENS[selectedToken].decimal}`);\n    // eslint-disable-next-line\n    }, [selectedToken, account],\n  );\n\n  const isDefaultAmountNeeded = toList !== null && toList.some((to) => to.amount === null);\n  const isDefaultAmountInvalid = defaultAmount === \"\" && isDefaultAmountNeeded;\n\n  const canGive = toList !== null && !isDefaultAmountInvalid;\n\n  return (\n    <Container className=\"mt-4\">\n      <Row className=\"justify-content-center\">\n        <h1>Airdrop</h1>\n      </Row>\n      <Row className=\"justify-content-center mt-3\">\n        <InputGroup hasValidation>\n          <Form.Control\n            as=\"textarea\"\n            className=\"Home__Addresses\"\n            onChange={(e) => setToList(parseAddresses(e.currentTarget.value))}\n            isInvalid={toList === null}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Please provide valid addresses with/without amount.\n          </Form.Control.Feedback>\n        </InputGroup>\n      </Row>\n      <Row className=\"justify-content-center mt-3\">\n        <Col xs=\"auto\">\n          <ButtonGroup>\n            {TOKENS.map(({ id, name }) => (\n              <ToggleButton\n                key={id}\n                id={`token-${id}`}\n                name=\"tokens-radio\"\n                type=\"radio\"\n                variant=\"outline-primary\"\n                value={id}\n                checked={selectedToken === id}\n                onChange={(e) => setSelectedToken(Number(e.currentTarget.value))}\n              >\n                {name}\n              </ToggleButton>\n            ))}\n          </ButtonGroup>\n        </Col>\n        <Col xs=\"auto\" className=\"d-flex align-items-center\">\n          <Spinner\n            as=\"span\"\n            animation=\"border\"\n            size=\"sm\"\n            role=\"status\"\n            aria-hidden=\"true\"\n            className={`me-1 ${isUpdatingAllowance ? \"\" : \"d-none\"}`}\n          />\n          <p className=\"m-0\">\n            {TOKENS[selectedToken].address}\n            &nbsp;decimal:&nbsp;\n            {TOKENS[selectedToken].decimal}\n          </p>\n        </Col>\n        <div className=\"w-100\" />\n        <Col xs=\"12\" md=\"6\" className=\"mt-3\">\n          <InputGroup hasValidation>\n            <InputGroup.Text>Default amount</InputGroup.Text>\n            <Form.Control\n              value={defaultAmount}\n              placeholder=\"amount\"\n              onChange={(e) => updateAmountByStr(e.currentTarget.value, setDefaultAmount)}\n              isInvalid={isDefaultAmountInvalid}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              Please provide amount for default.\n            </Form.Control.Feedback>\n          </InputGroup>\n        </Col>\n        <Col xs=\"12\" md=\"6\" className=\"mt-3\">\n          <InputGroup>\n            <InputGroup.Text>Addresses per transaction</InputGroup.Text>\n            <Form.Control\n              value={addressesPerTransaction}\n              placeholder=\"addresses number\"\n              onChange={(e) => updateAmountByStr(e.currentTarget.value, setAddressesPerTransaction)}\n            />\n          </InputGroup>\n        </Col>\n        <Col xs=\"12\" className=\"mt-3\">\n          <InputGroup>\n            <InputGroup.Text>Amount unit</InputGroup.Text>\n            <Form.Control\n              value={amountUnit}\n              placeholder=\"unit\"\n              onChange={(e) => updateAmountByStr(e.currentTarget.value, setAmountUnit)}\n            />\n          </InputGroup>\n        </Col>\n        <Col xs=\"auto\" className=\"mt-3\">\n          <Button\n            onClick={async () => {\n              setIsApproving(true);\n              try {\n                await approve(\n                  web3,\n                  selectedToken,\n                  account,\n                  SENDER,\n                  // 2 ** 256 - 1\n                  BigInt(\"115792089237316195423570985008687907853269984665640564039457584007913129639935\"),\n                );\n              } finally {\n                setIsApproving(false);\n              }\n              updateAllowance();\n            }}\n            disabled={isApproving}\n            className={allowanceAmount !== BigInt(0) ? \"d-none\" : \"\"}\n          >\n            <Spinner\n              as=\"span\"\n              animation=\"border\"\n              size=\"sm\"\n              role=\"status\"\n              aria-hidden=\"true\"\n              className={`me-1 ${isApproving ? \"\" : \"d-none\"}`}\n            />\n            Approve\n          </Button>\n        </Col>\n        <Col xs=\"auto\" className=\"mt-3\">\n          <Button\n            variant=\"success\"\n            onClick={async () => {\n              setGivedAddresses(0);\n              setIsGiving(true);\n              try {\n                await airdrop(\n                  web3,\n                  selectedToken,\n                  account,\n                  toList,\n                  BigInt(defaultAmount),\n                  BigInt(amountUnit),\n                  setGivedAddresses,\n                  Number(addressesPerTransaction),\n                );\n              } finally {\n                setIsGiving(false);\n              }\n              updateAllowance();\n            }}\n            disabled={\n              !canGive\n              || isGiving\n              || !toList.every((to) => web3.utils.isAddress(to.address))\n              || allowanceAmount === BigInt(0)\n            }\n          >\n            <Spinner\n              as=\"span\"\n              animation=\"border\"\n              size=\"sm\"\n              role=\"status\"\n              aria-hidden=\"true\"\n              className={`me-1 ${isGiving ? \"\" : \"d-none\"}`}\n            />\n            Airdrop\n            <span className={isGiving ? \"\" : \"d-none\"}>\n              &nbsp;\n              {givedAddresses}\n              /\n              {toList?.length}\n            </span>\n          </Button>\n        </Col>\n      </Row>\n      <Row className=\"mt-3\">\n        <Col>\n          <Table>\n            <thead>\n              <tr>\n                <th>Address</th>\n                <th>Amount</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                toList\n                  ? toList.map((to) => (\n                    <tr>\n                      <td>\n                        {to.address}\n                        <span className={`ms-4 text-danger ${web3.utils.isAddress(to.address) ? \"d-none\" : \"\"}`}>\n                          Invalid address\n                        </span>\n                      </td>\n                      <td className={to.amount ? \"\" : \"text-secondary\"}>\n                        {to.amount ? to.amount : \"default\"}\n                      </td>\n                    </tr>\n                  ))\n                  : []\n              }\n            </tbody>\n          </Table>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import React, {\n  useState,\n} from \"react\";\nimport assert from \"assert\";\n\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\n\nexport default function ToggleButtons(\n  {\n    selects,\n    groupName,\n    onChange,\n  }: {\n    selects: Array<{ id: number, value: number, name: string }>,\n    groupName: string,\n    onChange: (_: number) => void,\n  },\n): React.ReactElement {\n  const [selectedId, setSelectedId] = useState(0);\n  return (\n    <ButtonGroup>\n      {selects.map(({ id, name }) => (\n        <ToggleButton\n          key={id}\n          id={`${groupName}-${id}`}\n          name={`${groupName}s-radio`}\n          type=\"radio\"\n          variant=\"outline-primary\"\n          value={id}\n          checked={selectedId === id}\n          onChange={(e) => {\n            const changeId = Number(e.currentTarget.value);\n            setSelectedId(changeId);\n            const select = selects.find((s) => s.id === changeId);\n            assert(select);\n            onChange(select.value);\n          }}\n        >\n          {name}\n        </ToggleButton>\n      ))}\n    </ButtonGroup>\n  );\n}\n","import \"./NFT.scss\";\n\nimport React, {\n  useState,\n  useContext,\n} from \"react\";\nimport Web3 from \"web3\";\nimport { AbiItem } from \"web3-utils\";\nimport assert from \"assert\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Row from \"react-bootstrap/Row\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Table from \"react-bootstrap/Table\";\n\nimport { BaseProvider } from \"@metamask/providers\";\n\nimport ToggleButtons from \"../../components/ToggleButtons/ToggleButtons\";\n\nimport {\n  EthereumContext,\n  AccountContext,\n  EMPTY_FUNCTION,\n  updateAmountByStr,\n  validatePositiveInteger,\n} from \"../../utils/utils\";\n\nfunction parseAddresses(raw: string): string[] | null {\n  const toList: string[] = [];\n\n  const isValid = raw\n    .replaceAll(\",\", \" \")\n    .replaceAll(\"\\n\", \" \")\n    .replaceAll('\"', \"\")\n    .replaceAll(\"'\", \"\")\n    .replaceAll(\"`\", \"\")\n    .replaceAll(/  */g, \" \")\n    .trim()\n    .split(\" \")\n    .every((value) => {\n      if (!value.startsWith(\"0x\")) {\n        return false;\n      }\n      toList.push(value);\n      return true;\n    });\n\n  if (isValid) {\n    return toList;\n  }\n\n  return null;\n}\n\nconst CONTRACT_ABIS = [\n  {\n    inputs: [\n      { internalType: \"address[]\", name: \"owners\", type: \"address[]\" },\n      { internalType: \"uint256\", name: \"intentionQuality\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"intention\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"level\", type: \"uint256\" },\n    ],\n    name: \"forgeMaintainer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address[]\", name: \"owners\", type: \"address[]\" },\n      { internalType: \"uint256\", name: \"intention\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"level\", type: \"uint256\" },\n    ],\n    name: \"forgeCaptainMaintainer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst NFTS = [\n  { id: 0, value: 0, name: \"Warship\" },\n  { id: 1, value: 1, name: \"Captain\" },\n];\n\nconst QUALITIES = [\n  { id: 0, value: 40000, name: \"Purple\" },\n  { id: 1, value: 50000, name: \"Gold\" },\n];\n\nconst INTENTIONS = [\n  { id: 0, value: 1, name: \"Min\" },\n  { id: 1, value: 2, name: \"Mean\" },\n  { id: 2, value: 3, name: \"Max\" },\n  { id: 3, value: 4, name: \"Random\" },\n];\n\nconst SENDER = \"0x3a9AF5ea13625984EFFBf0cCc1c72580e3e3b7F1\";\n\nfunction airdropMaintainer(\n  web3: Web3,\n  from: string | null,\n  toList: string[] | null,\n  quality: number,\n  intention: number,\n  level: number,\n  progressSetter: (_: number) => void,\n  limit: number,\n): Promise<void> {\n  if (!from || !toList) {\n    return Promise.resolve();\n  }\n\n  const contractInstance = new web3.eth.Contract(CONTRACT_ABIS as AbiItem[], SENDER);\n\n  const airdrops = [];\n  let progress = 0;\n  for (let i = 0; i < toList.length; i += limit) {\n    const toSlice = toList.slice(i, i + limit);\n    airdrops.push(\n      // eslint-disable-next-line\n      contractInstance.methods\n        .forgeMaintainer(toSlice, quality, intention, level)\n        .send({ from })\n        // eslint-disable-next-line\n        .then(() => {\n          progress += toSlice.length;\n          progressSetter(progress);\n        }),\n    );\n  }\n\n  return Promise.all(airdrops).then(EMPTY_FUNCTION);\n}\n\nfunction airdropCaptainMaintainer(\n  web3: Web3,\n  from: string | null,\n  toList: string[] | null,\n  intention: number,\n  level: number,\n  progressSetter: (_: number) => void,\n  limit: number,\n): Promise<void> {\n  if (!from || !toList) {\n    return Promise.resolve();\n  }\n\n  const contractInstance = new web3.eth.Contract(CONTRACT_ABIS as AbiItem[], SENDER);\n\n  const airdrops = [];\n  let progress = 0;\n  for (let i = 0; i < toList.length; i += limit) {\n    const toSlice = toList.slice(i, i + limit);\n    airdrops.push(\n      // eslint-disable-next-line\n      contractInstance.methods\n        .forgeCaptainMaintainer(toSlice, intention, level)\n        .send({ from })\n        // eslint-disable-next-line\n        .then(() => {\n          progress += toSlice.length;\n          progressSetter(progress);\n        }),\n    );\n  }\n\n  return Promise.all(airdrops).then(EMPTY_FUNCTION);\n}\n\nexport default function NFT(): React.ReactElement {\n  const ethereum = useContext<BaseProvider | null>(EthereumContext);\n  assert(ethereum);\n  // eslint-disable-next-line\n  const web3 = new Web3(ethereum as any);\n  const account = useContext<string | null>(AccountContext);\n\n  const [selectedNFT, setSelectedNFT] = useState(0);\n  const [selectedQuality, setSelectedQuality] = useState(40000);\n  const [selectedIntention, setSelectedIntention] = useState(1);\n  const [level, setLevel] = useState(\"\");\n  const [addressesPerTransaction, setAddressesPerTransaction] = useState(\"50\");\n  const [toList, setToList] = useState<string[] | null>(null);\n  const [isGiving, setIsGiving] = useState(false);\n  const [givedAddresses, setGivedAddresses] = useState(0);\n\n  return (\n    <Container className=\"mt-4\">\n      <Row className=\"justify-content-center\">\n        <h1>NFT airdrop</h1>\n      </Row>\n      <Row className=\"justify-content-center mt-3\">\n        <InputGroup hasValidation>\n          <Form.Control\n            as=\"textarea\"\n            className=\"NFT__Addresses\"\n            onChange={(e) => setToList(parseAddresses(e.currentTarget.value))}\n            isInvalid={toList === null}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Please provide valid addresses.\n          </Form.Control.Feedback>\n        </InputGroup>\n      </Row>\n      <Row className=\"justify-content-center mt-3\">\n        <Col xs=\"auto\">\n          <ToggleButtons selects={NFTS} groupName=\"nft\" onChange={setSelectedNFT} />\n        </Col>\n        <Col xs=\"auto\" className={selectedNFT === 0 ? \"\" : \"d-none\"}>\n          <ToggleButtons selects={QUALITIES} groupName=\"quality\" onChange={setSelectedQuality} />\n        </Col>\n        <Col xs=\"auto\">\n          <ToggleButtons selects={INTENTIONS} groupName=\"intention\" onChange={setSelectedIntention} />\n        </Col>\n        <div className=\"w-100\" />\n        <Col xs=\"12\" md=\"6\" className=\"mt-3\">\n          <InputGroup>\n            <InputGroup.Text>Level</InputGroup.Text>\n            <Form.Control\n              value={level}\n              placeholder=\"level number\"\n              onChange={\n                (e) => updateAmountByStr(\n                  e.currentTarget.value,\n                  (raw) => {\n                    if (raw === \"\") {\n                      setLevel(raw);\n                    }\n                    const value = BigInt(raw);\n                    if (BigInt(1) <= value && value <= BigInt(30)) {\n                      setLevel(raw);\n                    }\n                  },\n                )\n              }\n            />\n          </InputGroup>\n        </Col>\n        <Col xs=\"12\" md=\"6\" className=\"mt-3\">\n          <InputGroup>\n            <InputGroup.Text>Addresses per transaction</InputGroup.Text>\n            <Form.Control\n              value={addressesPerTransaction}\n              placeholder=\"addresses number\"\n              onChange={(e) => updateAmountByStr(e.currentTarget.value, setAddressesPerTransaction)}\n            />\n          </InputGroup>\n        </Col>\n        <Col xs=\"auto\" className=\"mt-3\">\n          <Button\n            variant=\"success\"\n            onClick={async () => {\n              setGivedAddresses(0);\n              setIsGiving(true);\n              try {\n                if (selectedNFT === 0) {\n                  await airdropMaintainer(\n                    web3,\n                    account,\n                    toList,\n                    selectedQuality,\n                    selectedIntention,\n                    Number(level),\n                    setGivedAddresses,\n                    Number(addressesPerTransaction),\n                  );\n                } else {\n                  await airdropCaptainMaintainer(\n                    web3,\n                    account,\n                    toList,\n                    selectedIntention,\n                    Number(level),\n                    setGivedAddresses,\n                    Number(addressesPerTransaction),\n                  );\n                }\n              } finally {\n                setIsGiving(false);\n              }\n            }}\n            disabled={\n              toList === null\n              || isGiving\n              || !toList.every((to) => web3.utils.isAddress(to))\n              || !validatePositiveInteger(level)\n            }\n          >\n            <Spinner\n              as=\"span\"\n              animation=\"border\"\n              size=\"sm\"\n              role=\"status\"\n              aria-hidden=\"true\"\n              className={`me-1 ${isGiving ? \"\" : \"d-none\"}`}\n            />\n            Airdrop\n            <span className={isGiving ? \"\" : \"d-none\"}>\n              &nbsp;\n              {givedAddresses}\n              /\n              {toList?.length}\n            </span>\n          </Button>\n        </Col>\n      </Row>\n      <Row className=\"mt-3\">\n        <Col>\n          <Table>\n            <thead>\n              <tr>\n                <th>Address</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                toList\n                  ? toList.map((to) => (\n                    <tr>\n                      <td>\n                        {to}\n\n                        <span className={`ms-4 text-danger ${web3.utils.isAddress(to) ? \"d-none\" : \"\"}`}>\n                          Invalid address\n                        </span>\n                      </td>\n                    </tr>\n                  ))\n                  : []\n              }\n            </tbody>\n          </Table>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import React from \"react\";\n\nimport { Switch, Route, Redirect } from \"react-router-dom\";\n\nimport Home from \"./views/Home/Home\";\nimport NFT from \"./views/NFT/NFT\";\n\nexport default function Routes(): React.ReactElement {\n  return (\n    <Switch>\n      <Route path=\"/nft\">\n        <NFT />\n      </Route>\n      <Route path=\"/home\">\n        <Home />\n      </Route>\n      <Route path=\"/\">\n        <Redirect to=\"/home\" />\n      </Route>\n    </Switch>\n  );\n}\n","import \"./App.scss\";\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { HashRouter, NavLink } from \"react-router-dom\";\n\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport { BaseProvider } from \"@metamask/providers\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Row from \"react-bootstrap/Row\";\n\nimport { EthereumContext, AccountContext, EMPTY_FUNCTION } from \"./utils/utils\";\n\nimport Routes from \"./Routes\";\n\nconst ERROR_NETWORK_NOT_ADDED = 4902;\nconst CHAIN_ID = \"0x42\";\n\nasync function switchToChain(ethereum: BaseProvider) {\n  try {\n    await ethereum.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{ chainId: CHAIN_ID }],\n    });\n  } catch (switchError) {\n    const { code }: { code: number } = switchError as { code: number };\n\n    if (code !== ERROR_NETWORK_NOT_ADDED) {\n      return code;\n    }\n  }\n\n  return null;\n}\n\nasync function prepareChain(ethereum: BaseProvider) {\n  const switched = await switchToChain(ethereum);\n  if (switched && switched !== ERROR_NETWORK_NOT_ADDED) {\n    return false;\n  }\n\n  try {\n    await ethereum.request({\n      method: \"wallet_addEthereumChain\",\n      params: [{\n        chainId: CHAIN_ID,\n        chainName: \"OKExChain Mainnet\",\n        nativeCurrency: { name: \"OKT\", symbol: \"OKT\", decimals: 18 },\n        rpcUrls: [\"https://exchainrpc.okex.org\"],\n        blockExplorerUrls: [\"https://www.oklink.com/okexchain\"],\n      }],\n    });\n  } catch (addError) {\n    return false;\n  }\n\n  return !(await switchToChain(ethereum));\n}\n\nfunction App(): React.ReactElement {\n  const [ethereum, setEthereum] = useState<BaseProvider | null>(null);\n  const [account, setAccount] = useState<string | null>(null);\n  const [isOnChain, setIsOnChain] = useState(false);\n\n  detectEthereumProvider()\n    .then(\n      (provider) => { (setEthereum as (_: unknown) => void)(provider); },\n      EMPTY_FUNCTION,\n    );\n\n  const updateSelectedAccount = useCallback(\n    () => {\n      if (!ethereum) {\n        return;\n      }\n\n      setAccount(ethereum.selectedAddress);\n    },\n    [ethereum],\n  );\n\n  function connect() {\n    if (!ethereum) {\n      return;\n    }\n    ethereum.request({ method: \"eth_requestAccounts\" })\n      .then(updateSelectedAccount, EMPTY_FUNCTION);\n  }\n\n  useEffect(\n    () => {\n      if (!ethereum) {\n        return EMPTY_FUNCTION;\n      }\n\n      ethereum.request({ method: \"eth_accounts\" })\n        .then(updateSelectedAccount, EMPTY_FUNCTION);\n\n      ethereum.on(\"accountsChanged\", updateSelectedAccount);\n      return () => {\n        ethereum.removeListener(\"accountsChanged\", updateSelectedAccount);\n      };\n    },\n    [ethereum, updateSelectedAccount],\n  );\n\n  useEffect(\n    () => {\n      if (!ethereum) {\n        return;\n      }\n\n      prepareChain(ethereum).then(setIsOnChain, EMPTY_FUNCTION);\n    },\n    [ethereum],\n  );\n\n  if (!ethereum) {\n    return <div>You must installed MetaMask to use Celestial dashboard!</div>;\n  }\n\n  if (!isOnChain) {\n    return (<div>You are not on chain!</div>);\n  }\n\n  if (!account) {\n    return (\n      <Container>\n        <Row className=\"justify-content-center\">\n          <Col xs=\"auto\">You must connect to MetaMask to use Celestial dashboard!</Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <Col xs=\"auto\">\n            <Button onClick={() => connect()}>Connect</Button>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  return (\n    <EthereumContext.Provider value={ethereum}>\n      <AccountContext.Provider value={account}>\n        <HashRouter>\n          <Navbar>\n            <Container>\n              <Nav>\n                <NavLink to=\"/home\" className=\"me-3 text-decoration-none\">\n                  Airdrop\n                </NavLink>\n                <NavLink to=\"/nft\" className=\"text-decoration-none\">\n                  NFT airdrop\n                </NavLink>\n              </Nav>\n              <Navbar.Brand>{account}</Navbar.Brand>\n            </Container>\n          </Navbar>\n          <Routes />\n        </HashRouter>\n      </AccountContext.Provider>\n    </EthereumContext.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}