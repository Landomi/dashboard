{"version":3,"sources":["utils/utils.ts","views/Home/Home.tsx","App.tsx","index.jsx"],"names":["EthereumContext","createContext","AccountContext","ERROR_NETWORK_NOT_ADDED","CHAIN_ID","switchToChain","ethereum","a","request","method","params","chainId","code","switched","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","validatePositiveInteger","raw","value","BigInt","String","_","updateAmountByStr","setter","To","address","amount","this","TOKENS","id","decimal","CONTRACT_ABIS","inputs","internalType","type","outputs","stateMutability","ERC20_ABIS","constant","payable","approve","web3","index","from","sender","unit","Promise","resolve","eth","Contract","methods","send","SENDER","EMPTY_FUNCTION","airdrop","toList","defaultAmount","progressSetter","limit","contractInstance","defaultTo","Array","filter","to","explicitedTo","explicitedToAmount","airdrops","progress","length","i","toSlice","slice","push","airDropBatch","then","amountSlice","map","v","assert","airDropIndividual","all","Home","useContext","callback","Web3","account","useState","isOnChain","setIsOnChain","selectedToken","setSelectedToken","allowanceAmount","setAllowanceAmount","setDefaultAmount","approveAmount","setApproveAmount","addressesPerTransaction","setAddressesPerTransaction","setToList","isApproving","setIsApproving","isGiving","setIsGiving","isUpdatingAllowance","setIsUpdatingAllowance","givedAddresses","setGivedAddresses","amountUnit","setAmountUnit","updateAllowance","owner","allowance","call","getAllowance","useEffect","prepareChain","isDefaultAmountNeeded","some","isDefaultAmountInvalid","canGive","Container","className","Row","InputGroup","hasValidation","Form","Control","as","onChange","e","previousAddress","replaceAll","trim","toLowerCase","split","every","startsWith","parseAddresses","currentTarget","isInvalid","Feedback","Col","xs","ButtonGroup","ToggleButton","variant","checked","Number","Spinner","animation","size","role","md","Text","placeholder","Button","onClick","disabled","Table","App","setEthereum","setAccount","detectEthereumProvider","provider","updateSelectedAccount","useCallback","selectedAddress","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.132931be.chunk.js","sourcesContent":["import { createContext, useEffect } from \"react\";\n\nimport { BaseProvider } from \"@metamask/providers\";\n\nexport const EthereumContext = createContext<BaseProvider | null>(null);\n\nexport const AccountContext = createContext<string | null>(null);\n\nexport function useMountState(callback: () => void): void {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(callback, []);\n}\n","import \"./Home.scss\";\n\nimport React, {\n  useState,\n  useContext,\n  useEffect,\n} from \"react\";\nimport Web3 from \"web3\";\nimport { AbiItem } from \"web3-utils\";\nimport assert from \"assert\";\n\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Row from \"react-bootstrap/Row\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Table from \"react-bootstrap/Table\";\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\n\nimport { BaseProvider } from \"@metamask/providers\";\n\nimport { EthereumContext, AccountContext, useMountState } from \"../../utils/utils\";\n\nconst ERROR_NETWORK_NOT_ADDED = 4902;\nconst CHAIN_ID = \"0x42\";\n\nasync function switchToChain(ethereum: BaseProvider) {\n  try {\n    await ethereum.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{ chainId: CHAIN_ID }],\n    });\n  } catch (switchError) {\n    const { code }: { code: number } = switchError as { code: number };\n\n    if (code !== ERROR_NETWORK_NOT_ADDED) {\n      return code;\n    }\n  }\n\n  return null;\n}\n\nasync function prepareChain(ethereum: BaseProvider) {\n  const switched = await switchToChain(ethereum);\n  if (switched && switched !== ERROR_NETWORK_NOT_ADDED) {\n    return false;\n  }\n\n  try {\n    await ethereum.request({\n      method: \"wallet_addEthereumChain\",\n      params: [{\n        chainId: CHAIN_ID,\n        chainName: \"OKExChain Mainnet\",\n        nativeCurrency: { name: \"OKT\", symbol: \"OKT\", decimals: 18 },\n        rpcUrls: [\"https://exchainrpc.okex.org\"],\n        blockExplorerUrls: [\"https://www.oklink.com/okexchain\"],\n      }],\n    });\n  } catch (addError) {\n    return false;\n  }\n\n  return !(await switchToChain(ethereum));\n}\n\nfunction validatePositiveInteger(raw: string): bigint | null {\n  try {\n    const value = BigInt(raw);\n    if (String(value) === raw && value > 0) {\n      return value;\n    }\n  } catch (_) { /* do nothing */ }\n  return null;\n}\n\nfunction updateAmountByStr(raw: string, setter: (_: string) => void) {\n  if (raw === \"\" || validatePositiveInteger(raw) !== null) {\n    setter(raw);\n  }\n}\n\nclass To {\n  address: string;\n\n  amount: bigint | null;\n\n  constructor(address: string, amount: bigint | null) {\n    this.address = address;\n    this.amount = amount;\n  }\n}\n\nfunction parseAddresses(raw: string): To[] | null {\n  const toList: To[] = [];\n  let previousAddress: To | null = null;\n\n  const isValid = raw\n    .replaceAll(\",\", \" \")\n    .replaceAll(\"\\n\", \" \")\n    .replaceAll('\"', \"\")\n    .replaceAll(\"'\", \"\")\n    .replaceAll(\"`\", \"\")\n    .replaceAll(/  */g, \" \")\n    .trim()\n    .toLowerCase()\n    .split(\" \")\n    .every((value) => {\n      if (value.startsWith(\"0x\")) {\n        previousAddress = new To(value, null);\n        toList.push(previousAddress);\n      } else if (validatePositiveInteger(value)) {\n        if (previousAddress === null || previousAddress.amount !== null) {\n          return false;\n        }\n        previousAddress.amount = BigInt(value);\n      } else {\n        return false;\n      }\n      return true;\n    });\n\n  if (isValid) {\n    return toList;\n  }\n\n  return null;\n}\n\nconst TOKENS = [\n  {\n    id: 0,\n    name: \"Celt\",\n    address: \"0x5Ab622494AB7C5e81911558c9552DBd517F403fb\",\n    decimal: 18,\n  },\n  {\n    id: 1,\n    name: \"Crystal\",\n    address: \"0xBD87c06D865a3717A16041aCD8d33922e60E85CE\",\n    decimal: 18,\n  },\n  {\n    id: 2,\n    name: \"CeltChest\",\n    address: \"0x777c5a7152F999B4bBC26295C65a0ACb066f75e9\",\n    decimal: 0,\n  },\n];\n\nconst CONTRACT_ABIS = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"erc20Token\", type: \"address\" },\n      { internalType: \"address[]\", name: \"targets\", type: \"address[]\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n    ],\n    name: \"airDropBatch\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"erc20Token\", type: \"address\" },\n      { internalType: \"address[]\", name: \"targets\", type: \"address[]\" },\n      { internalType: \"uint256[]\", name: \"amounts\", type: \"uint256[]\" },\n    ],\n    name: \"airDropIndividual\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst ERC20_ABIS = [\n  {\n    constant: true,\n    inputs: [{ name: \"_owner\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ name: \"balance\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: \"_spender\", type: \"address\" },\n      { name: \"_value\", type: \"uint256\" },\n    ],\n    name: \"approve\",\n    outputs: [{ name: \"\", type: \"bool\" }],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      { name: \"_owner\", type: \"address\" },\n      { name: \"_spender\", type: \"address\" },\n    ],\n    name: \"allowance\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nfunction getAllowance(\n  web3: Web3,\n  index: number,\n  owner: string | null,\n  sender: string,\n): Promise<number> {\n  if (!owner) {\n    return Promise.resolve(0);\n  }\n\n  const { address } = TOKENS[index];\n\n  const erc20Contract = new web3.eth.Contract(ERC20_ABIS as AbiItem[], address);\n\n  // eslint-disable-next-line\n  return erc20Contract.methods.allowance(owner, sender).call();\n}\n\nfunction approve(\n  web3: Web3,\n  index: number,\n  from: string | null,\n  sender: string,\n  amount: bigint,\n  unit: bigint,\n): Promise<void> {\n  if (!from) {\n    return Promise.resolve();\n  }\n\n  const { address } = TOKENS[index];\n\n  const erc20Contract = new web3.eth.Contract(ERC20_ABIS as AbiItem[], address);\n\n  // eslint-disable-next-line\n  return erc20Contract.methods.approve(sender, amount * unit).send({ from });\n}\n\nconst SENDER = \"0x074101c52ea69D66577057ECA07147bcF7B3f057\";\n\nfunction EMPTY_FUNCTION() { /* ignore promise handling */ }\n\nfunction airdrop(\n  web3: Web3,\n  index: number,\n  from: string | null,\n  toList: To[] | null,\n  defaultAmount: bigint,\n  unit: bigint,\n  progressSetter: (_: number) => void,\n  limit: number,\n): Promise<void> {\n  if (!from || !toList) {\n    return Promise.resolve();\n  }\n\n  const { address } = TOKENS[index];\n\n  const contractInstance = new web3.eth.Contract(CONTRACT_ABIS as AbiItem[], SENDER);\n\n  const defaultTo = Array.from(\n    toList.filter((to) => to.amount === null),\n    (to) => to.address,\n  );\n  const explicitedTo = Array.from(\n    toList.filter((to) => to.amount !== null),\n    (to) => to.address,\n  );\n  const explicitedToAmount = Array.from(\n    toList.filter((to) => to.amount !== null),\n    (to) => to.amount,\n  );\n\n  const airdrops = [];\n  let progress = 0;\n  if (defaultTo.length !== 0) {\n    for (let i = 0; i < defaultTo.length; i += limit) {\n      const toSlice = defaultTo.slice(i, i + limit);\n      airdrops.push(\n        // eslint-disable-next-line\n        contractInstance.methods\n          .airDropBatch(address, toSlice, defaultAmount * unit)\n          .send({ from })\n          // eslint-disable-next-line\n          .then(() => {\n            progress += toSlice.length;\n            progressSetter(progress);\n          }),\n      );\n    }\n  }\n\n  if (explicitedTo.length !== 0) {\n    for (let i = 0; i < explicitedTo.length; i += limit) {\n      const toSlice = explicitedTo.slice(i, i + limit);\n      const amountSlice = explicitedToAmount\n        .slice(i, i + limit)\n        .map((v: bigint | null) => {\n          assert(v);\n          return v * unit;\n        });\n      airdrops.push(\n        // eslint-disable-next-line\n        contractInstance.methods\n          .airDropIndividual(address, toSlice, amountSlice)\n          .send({ from })\n          // eslint-disable-next-line\n          .then(() => {\n            progress += toSlice.length;\n            progressSetter(progress);\n          }),\n      );\n    }\n  }\n\n  return Promise.all(airdrops).then(EMPTY_FUNCTION);\n}\n\nexport default function Home(): React.ReactElement {\n  const ethereum = useContext<BaseProvider | null>(EthereumContext);\n  assert(ethereum);\n  // eslint-disable-next-line\n  const web3 = new Web3(ethereum as any);\n  const account = useContext<string | null>(AccountContext);\n\n  const [isOnChain, setIsOnChain] = useState(false);\n  const [selectedToken, setSelectedToken] = useState(0);\n  const [allowanceAmount, setAllowanceAmount] = useState<bigint>(BigInt(0));\n  const [defaultAmount, setDefaultAmount] = useState(\"\");\n  const [approveAmount, setApproveAmount] = useState(\"\");\n  const [addressesPerTransaction, setAddressesPerTransaction] = useState(\"200\");\n  const [toList, setToList] = useState<To[] | null>(null);\n  const [isApproving, setIsApproving] = useState(false);\n  const [isGiving, setIsGiving] = useState(false);\n  const [isUpdatingAllowance, setIsUpdatingAllowance] = useState(false);\n  const [givedAddresses, setGivedAddresses] = useState(0);\n  const [amountUnit, setAmountUnit] = useState(\"\");\n\n  function updateAllowance() {\n    setIsUpdatingAllowance(true);\n    getAllowance(web3, selectedToken, account, SENDER)\n      .then((amount: number) => {\n        setAllowanceAmount(BigInt(amount));\n        setIsUpdatingAllowance(false);\n      }, EMPTY_FUNCTION);\n  }\n  useEffect(\n    () => {\n      updateAllowance();\n      setAmountUnit(`${10 ** TOKENS[selectedToken].decimal}`);\n    // eslint-disable-next-line\n    }, [selectedToken, account],\n  );\n\n  useMountState(\n    () => { prepareChain(ethereum).then(setIsOnChain, EMPTY_FUNCTION); },\n  );\n\n  if (!isOnChain) {\n    return (<div>You are not on chain!</div>);\n  }\n\n  const isDefaultAmountNeeded = toList !== null && toList.some((to) => to.amount === null);\n  const isDefaultAmountInvalid = defaultAmount === \"\" && isDefaultAmountNeeded;\n\n  const canGive = toList !== null && !isDefaultAmountInvalid;\n\n  return (\n    <Container className=\"mt-4\">\n      <Row className=\"justify-content-end\">{account}</Row>\n      <Row className=\"justify-content-center\">\n        <h1>Airdrop</h1>\n      </Row>\n      <Row className=\"justify-content-center mt-3\">\n        <InputGroup hasValidation>\n          <Form.Control\n            as=\"textarea\"\n            className=\"Home__Addresses\"\n            onChange={(e) => setToList(parseAddresses(e.currentTarget.value))}\n            isInvalid={toList === null}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Please provide valid addresses with/without amount.\n          </Form.Control.Feedback>\n        </InputGroup>\n      </Row>\n      <Row className=\"justify-content-center mt-3\">\n        <Col xs=\"auto\">\n          <ButtonGroup>\n            {TOKENS.map(({ id, name }) => (\n              <ToggleButton\n                key={id}\n                id={`token-${id}`}\n                name=\"tokens-radio\"\n                type=\"radio\"\n                variant=\"outline-primary\"\n                value={id}\n                checked={selectedToken === id}\n                onChange={(e) => setSelectedToken(Number(e.currentTarget.value))}\n              >\n                {name}\n              </ToggleButton>\n            ))}\n          </ButtonGroup>\n        </Col>\n        <Col xs=\"auto\" className=\"d-flex align-items-center\">\n          <Spinner\n            as=\"span\"\n            animation=\"border\"\n            size=\"sm\"\n            role=\"status\"\n            aria-hidden=\"true\"\n            className={`me-1 ${isUpdatingAllowance ? \"\" : \"d-none\"}`}\n          />\n          <p className=\"m-0\">\n            Allownance amount: &nbsp;\n            {String(allowanceAmount / BigInt(amountUnit))}\n            &nbsp;(\n            {String(allowanceAmount)}\n            , decimal:&nbsp;\n            {TOKENS[selectedToken].decimal}\n            )&nbsp;\n            {TOKENS[selectedToken].address}\n          </p>\n        </Col>\n        <div className=\"w-100\" />\n        <Col xs=\"12\" md=\"6\" className=\"mt-3\">\n          <InputGroup>\n            <InputGroup.Text>Approve amount</InputGroup.Text>\n            <Form.Control\n              value={approveAmount}\n              placeholder=\"amount\"\n              onChange={(e) => updateAmountByStr(e.currentTarget.value, setApproveAmount)}\n            />\n          </InputGroup>\n        </Col>\n        <Col xs=\"12\" md=\"6\" className=\"mt-3\">\n          <InputGroup hasValidation>\n            <InputGroup.Text>Default amount</InputGroup.Text>\n            <Form.Control\n              value={defaultAmount}\n              placeholder=\"amount\"\n              onChange={(e) => updateAmountByStr(e.currentTarget.value, setDefaultAmount)}\n              isInvalid={isDefaultAmountInvalid}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              Please provide amount for default.\n            </Form.Control.Feedback>\n          </InputGroup>\n        </Col>\n        <Col xs=\"12\" md=\"6\" className=\"mt-3\">\n          <InputGroup>\n            <InputGroup.Text>Addresses per transaction</InputGroup.Text>\n            <Form.Control\n              value={addressesPerTransaction}\n              placeholder=\"addresses number\"\n              onChange={(e) => updateAmountByStr(e.currentTarget.value, setAddressesPerTransaction)}\n            />\n          </InputGroup>\n        </Col>\n        <Col xs=\"12\" md=\"6\" className=\"mt-3\">\n          <InputGroup>\n            <InputGroup.Text>Amount unit</InputGroup.Text>\n            <Form.Control\n              value={amountUnit}\n              placeholder=\"unit\"\n              onChange={(e) => updateAmountByStr(e.currentTarget.value, setAmountUnit)}\n            />\n          </InputGroup>\n        </Col>\n        <Col xs=\"auto\" className=\"mt-3\">\n          <Button\n            onClick={async () => {\n              setIsApproving(true);\n              try {\n                await approve(\n                  web3,\n                  selectedToken,\n                  account,\n                  SENDER,\n                  BigInt(approveAmount),\n                  BigInt(amountUnit),\n                );\n              } finally {\n                setIsApproving(false);\n              }\n              updateAllowance();\n            }}\n            disabled={approveAmount === \"\" || isApproving}\n          >\n            <Spinner\n              as=\"span\"\n              animation=\"border\"\n              size=\"sm\"\n              role=\"status\"\n              aria-hidden=\"true\"\n              className={`me-1 ${isApproving ? \"\" : \"d-none\"}`}\n            />\n            Approve\n          </Button>\n        </Col>\n        <Col xs=\"auto\" className=\"mt-3\">\n          <Button\n            variant=\"success\"\n            onClick={async () => {\n              setGivedAddresses(0);\n              setIsGiving(true);\n              try {\n                await airdrop(\n                  web3,\n                  selectedToken,\n                  account,\n                  toList,\n                  BigInt(defaultAmount),\n                  BigInt(amountUnit),\n                  setGivedAddresses,\n                  Number(addressesPerTransaction),\n                );\n              } finally {\n                setIsGiving(false);\n              }\n              updateAllowance();\n            }}\n            disabled={!canGive || isGiving}\n          >\n            <Spinner\n              as=\"span\"\n              animation=\"border\"\n              size=\"sm\"\n              role=\"status\"\n              aria-hidden=\"true\"\n              className={`me-1 ${isGiving ? \"\" : \"d-none\"}`}\n            />\n            Airdrop\n            <span className={isGiving ? \"\" : \"d-none\"}>\n              &nbsp;\n              {givedAddresses}\n              /\n              {toList?.length}\n            </span>\n          </Button>\n        </Col>\n      </Row>\n      <Row className=\"mt-3\">\n        <Col>\n          <Table>\n            <thead>\n              <tr>\n                <th>Address</th>\n                <th>Amount</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                toList\n                  ? toList.map((to) => (\n                    <tr>\n                      <td>{to.address}</td>\n                      <td className={to.amount ? \"\" : \"text-secondary\"}>\n                        {to.amount ? to.amount : \"default\"}\n                      </td>\n                    </tr>\n                  ))\n                  : []\n              }\n            </tbody>\n          </Table>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import \"./App.scss\";\n\nimport React, { useState, useEffect, useCallback } from \"react\";\n\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport { BaseProvider } from \"@metamask/providers\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nimport { EthereumContext, AccountContext } from \"./utils/utils\";\n\nimport Home from \"./views/Home/Home\";\n\nfunction App(): React.ReactElement {\n  const [ethereum, setEthereum] = useState<BaseProvider | null>(null);\n  const [account, setAccount] = useState<string | null>(null);\n\n  detectEthereumProvider()\n    .then(\n      (provider) => { (setEthereum as (_: unknown) => void)(provider); },\n      () => { /* don't need to handle promise */ },\n    );\n\n  const updateSelectedAccount = useCallback(\n    () => {\n      if (!ethereum) {\n        return;\n      }\n\n      setAccount(ethereum.selectedAddress);\n    },\n    [ethereum],\n  );\n\n  function connect() {\n    if (!ethereum) {\n      return;\n    }\n    ethereum.request({ method: \"eth_requestAccounts\" })\n      .then(\n        updateSelectedAccount,\n        () => { /* don't need to handle promise */ },\n      );\n  }\n\n  useEffect(\n    () => {\n      if (!ethereum) {\n        return;\n      }\n\n      ethereum.request({ method: \"eth_accounts\" })\n        .then(\n          updateSelectedAccount,\n          () => { /* don't need to handle promise */ },\n        );\n    },\n    [ethereum, updateSelectedAccount],\n  );\n\n  if (!ethereum) {\n    return <div>You must installed MetaMask to use Celestial dashboard!</div>;\n  }\n\n  if (!account) {\n    return (\n      <Container>\n        <Row className=\"justify-content-center\">\n          <Col xs=\"auto\">You must connect to MetaMask to use Celestial dashboard!</Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <Col xs=\"auto\">\n            <Button onClick={() => connect()}>Connect</Button>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  return (\n    <EthereumContext.Provider value={ethereum}>\n      <AccountContext.Provider value={account}>\n        <Home />\n      </AccountContext.Provider>\n    </EthereumContext.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}