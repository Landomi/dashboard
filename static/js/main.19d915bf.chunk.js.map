{"version":3,"sources":["utils/utils.ts","views/Home/Home.tsx","components/ToggleButtons/ToggleButtons.tsx","views/NFT/NFT.tsx","Routes.tsx","App.tsx","index.jsx"],"names":["EthereumContext","createContext","AccountContext","EMPTY_FUNCTION","validatePositiveInteger","raw","value","BigInt","String","_","FIXED_DECIMAL_UNIT","validatePositiveFixedDecimal","split","length","left","full","replace","fixedDecimalToStr","decimal","right","rightRaw","padStart","slice","updateAmountByStr","setter","valSetter","updateIntegerByStr","To","address","amount","this","TOKENS","id","name","CONTRACT_ABIS","inputs","internalType","type","outputs","stateMutability","ERC20_ABIS","constant","payable","approve","web3","index","from","sender","Promise","resolve","eth","Contract","methods","send","SENDER","airdrop","toList","defaultAmount","progressSetter","limit","unit","contractInstance","defaultTo","Array","filter","to","explicitedTo","explicitedToAmount","airdrops","progress","i","toSlice","push","airDropBatch","then","amountSlice","map","v","assert","airDropIndividual","all","Home","ethereum","useContext","Web3","account","useState","randomAddressesQuantity","setRandomAddressesQuantity","minAmountRaw","setMinAmountRaw","minAmount","setMinAmount","maxAmountRaw","setMaxAmountRaw","maxAmount","setMaxAmount","selectedToken","setSelectedToken","allowanceAmount","setAllowanceAmount","defaultAmountRaw","setDefaultAmountRaw","setDefaultAmount","addressesPerTransaction","setAddressesPerTransaction","toRaw","setToRaw","setToList","isApproving","setIsApproving","isGiving","setIsGiving","isUpdatingAllowance","setIsUpdatingAllowance","givedAddresses","setGivedAddresses","setDecimal","token","updateAllowance","owner","allowance","call","getAllowance","updateToRaw","previousAddress","replaceAll","trim","every","startsWith","parseAddresses","useEffect","isDefaultAmountNeeded","some","isDefaultAmountInvalid","Container","className","Row","InputGroup","hasValidation","Form","Control","as","onChange","e","currentTarget","isInvalid","Feedback","Col","xs","Text","placeholder","md","Button","onClick","result","Number","accounts","create","Math","floor","random","join","disabled","ButtonGroup","ToggleButton","variant","checked","Spinner","animation","size","role","a","utils","isAddress","Table","ToggleButtons","selects","groupName","selectedId","setSelectedId","changeId","select","find","s","NFTS","QUALITIES","INTENTIONS","airdropMaintainer","quality","intention","level","forgeMaintainer","airdropCaptainMaintainer","forgeCaptainMaintainer","NFT","selectedNFT","setSelectedNFT","selectedQuality","setSelectedQuality","selectedIntention","setSelectedIntention","setLevel","Routes","path","ERROR_NETWORK_NOT_ADDED","CHAIN_ID","switchToChain","request","method","params","chainId","code","switched","chainName","nativeCurrency","symbol","decimals","rpcUrls","blockExplorerUrls","App","setEthereum","setAccount","isOnChain","setIsOnChain","detectEthereumProvider","provider","updateSelectedAccount","useCallback","selectedAddress","on","removeListener","prepareChain","Provider","Navbar","Nav","Brand","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19d915bf.chunk.js","sourcesContent":["import { createContext, useEffect } from \"react\";\n\nimport { BaseProvider } from \"@metamask/providers\";\n\nexport const EthereumContext = createContext<BaseProvider | null>(null);\n\nexport const AccountContext = createContext<string | null>(null);\n\nexport function useMountState(callback: () => void): void {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(callback, []);\n}\n\nexport function EMPTY_FUNCTION(): void { /* ignore promise handling */ }\n\nexport function validatePositiveInteger(raw: string): bigint | null {\n  try {\n    const value = BigInt(raw);\n    if (String(value) === raw && value > 0) {\n      return value;\n    }\n  } catch (_) { /* do nothing */ }\n  return null;\n}\n\nconst FIXED_DECIMAL_UNIT = BigInt(10 ** 18);\nexport function validatePositiveFixedDecimal(raw: string): bigint | null {\n  try {\n    const value = raw.split(\".\");\n    if (value.length > 2 || value.length === 0) {\n      return null;\n    }\n    if (value.length === 1) {\n      const left = validatePositiveInteger(value[0]);\n      if (!left) {\n        return null;\n      }\n      return left * FIXED_DECIMAL_UNIT;\n    }\n    const full = validatePositiveInteger(raw.replace(\".\", \"\"));\n    if (!full || value[1].length > 18) {\n      return null;\n    }\n    return full * BigInt(10 ** (18 - value[1].length));\n  } catch (_) { /* do nothing */ }\n  return null;\n}\n\nexport function fixedDecimalToStr(value: bigint, decimal: number): string {\n  const left = value / BigInt(10 ** 18);\n  const right = value - left * BigInt(10 ** 18);\n  if (right === BigInt(0) || decimal === 0) {\n    return String(left);\n  }\n  let rightRaw = String(right).padStart(18, \"0\");\n  if (rightRaw.length > decimal) {\n    rightRaw = rightRaw.slice(0, decimal);\n  }\n  return `${left}.${rightRaw}`.replace(/0*$/g, \"\");\n}\n\nexport function updateAmountByStr(\n  raw: string,\n  setter: (_: string) => void,\n  valSetter?: (_: bigint | null) => void,\n): void {\n  const value = validatePositiveFixedDecimal(raw);\n  if (raw === \"\" || value !== null) {\n    setter(raw);\n    if (valSetter) {\n      valSetter(value);\n    }\n  }\n}\n\nexport function updateIntegerByStr(raw: string, setter: (_: string) => void): void {\n  if (raw === \"\" || validatePositiveInteger(raw) !== null) {\n    setter(raw);\n  }\n}\n","import \"./Home.scss\";\n\nimport React, {\n  useState,\n  useContext,\n  useEffect,\n} from \"react\";\nimport Web3 from \"web3\";\nimport { AbiItem } from \"web3-utils\";\nimport assert from \"assert\";\n\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Row from \"react-bootstrap/Row\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Table from \"react-bootstrap/Table\";\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\n\nimport { BaseProvider } from \"@metamask/providers\";\n\nimport {\n  EthereumContext,\n  AccountContext,\n  EMPTY_FUNCTION,\n  updateAmountByStr,\n  updateIntegerByStr,\n  validatePositiveFixedDecimal,\n  fixedDecimalToStr,\n} from \"../../utils/utils\";\n\nclass To {\n  address: string;\n\n  amount: bigint | null;\n\n  constructor(address: string, amount: bigint | null) {\n    this.address = address;\n    this.amount = amount;\n  }\n}\n\nfunction parseAddresses(raw: string): To[] | null {\n  const toList: To[] = [];\n  let previousAddress: To | null = null;\n\n  const isValid = raw\n    .replaceAll(\",\", \" \")\n    .replaceAll(\"\\n\", \" \")\n    .replaceAll('\"', \"\")\n    .replaceAll(\"'\", \"\")\n    .replaceAll(\"`\", \"\")\n    .replaceAll(/  */g, \" \")\n    .trim()\n    .split(\" \")\n    .every((value) => {\n      if (value.startsWith(\"0x\")) {\n        previousAddress = new To(value, null);\n        toList.push(previousAddress);\n        return true;\n      }\n      const amount = validatePositiveFixedDecimal(value);\n      if (amount) {\n        if (previousAddress === null || previousAddress.amount !== null) {\n          return false;\n        }\n        previousAddress.amount = amount;\n      } else {\n        return false;\n      }\n      return true;\n    });\n\n  if (isValid) {\n    return toList;\n  }\n\n  return null;\n}\n\nconst TOKENS = [\n  {\n    id: 0,\n    name: \"Celt\",\n    address: \"0x5Ab622494AB7C5e81911558c9552DBd517F403fb\",\n    decimal: 18,\n  },\n  {\n    id: 1,\n    name: \"Crystal\",\n    address: \"0xBD87c06D865a3717A16041aCD8d33922e60E85CE\",\n    decimal: 18,\n  },\n  {\n    id: 2,\n    name: \"CeltChest\",\n    address: \"0x777c5a7152F999B4bBC26295C65a0ACb066f75e9\",\n    decimal: 0,\n  },\n];\n\nconst CONTRACT_ABIS = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"erc20Token\", type: \"address\" },\n      { internalType: \"address[]\", name: \"targets\", type: \"address[]\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n    ],\n    name: \"airDropBatch\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"erc20Token\", type: \"address\" },\n      { internalType: \"address[]\", name: \"targets\", type: \"address[]\" },\n      { internalType: \"uint256[]\", name: \"amounts\", type: \"uint256[]\" },\n    ],\n    name: \"airDropIndividual\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst ERC20_ABIS = [\n  {\n    constant: true,\n    inputs: [{ name: \"_owner\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ name: \"balance\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: \"_spender\", type: \"address\" },\n      { name: \"_value\", type: \"uint256\" },\n    ],\n    name: \"approve\",\n    outputs: [{ name: \"\", type: \"bool\" }],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      { name: \"_owner\", type: \"address\" },\n      { name: \"_spender\", type: \"address\" },\n    ],\n    name: \"allowance\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nfunction getAllowance(\n  web3: Web3,\n  index: number,\n  owner: string | null,\n  sender: string,\n): Promise<number> {\n  if (!owner) {\n    return Promise.resolve(0);\n  }\n\n  const { address } = TOKENS[index];\n\n  const erc20Contract = new web3.eth.Contract(ERC20_ABIS as AbiItem[], address);\n\n  // eslint-disable-next-line\n  return erc20Contract.methods.allowance(owner, sender).call();\n}\n\nfunction approve(\n  web3: Web3,\n  index: number,\n  from: string | null,\n  sender: string,\n  amount: bigint,\n): Promise<void> {\n  if (!from) {\n    return Promise.resolve();\n  }\n\n  const { address } = TOKENS[index];\n\n  const erc20Contract = new web3.eth.Contract(ERC20_ABIS as AbiItem[], address);\n\n  // eslint-disable-next-line\n  return erc20Contract.methods.approve(sender, amount).send({ from });\n}\n\nconst SENDER = \"0x074101c52ea69D66577057ECA07147bcF7B3f057\";\n\nfunction airdrop(\n  web3: Web3,\n  index: number,\n  from: string | null,\n  toList: To[] | null,\n  defaultAmount: bigint | null,\n  decimal: number,\n  progressSetter: (_: number) => void,\n  limit: number,\n): Promise<void> {\n  if (!from || !toList) {\n    return Promise.resolve();\n  }\n  const unit = BigInt(10 ** decimal);\n\n  const { address } = TOKENS[index];\n\n  const contractInstance = new web3.eth.Contract(CONTRACT_ABIS as AbiItem[], SENDER);\n\n  const defaultTo = Array.from(\n    toList.filter((to) => to.amount === null),\n    (to) => to.address,\n  );\n  const explicitedTo = Array.from(\n    toList.filter((to) => to.amount !== null),\n    (to) => to.address,\n  );\n  const explicitedToAmount = Array.from(\n    toList.filter((to) => to.amount !== null),\n    (to) => to.amount,\n  );\n\n  const airdrops = [];\n  let progress = 0;\n  if (defaultTo.length !== 0) {\n    if (!defaultAmount) {\n      return Promise.resolve();\n    }\n    for (let i = 0; i < defaultTo.length; i += limit) {\n      const toSlice = defaultTo.slice(i, i + limit);\n      airdrops.push(\n        // eslint-disable-next-line\n        contractInstance.methods\n          .airDropBatch(address, toSlice, (defaultAmount * unit) / BigInt(10 ** 18))\n          .send({ from })\n          // eslint-disable-next-line\n          .then(() => {\n            progress += toSlice.length;\n            progressSetter(progress);\n          }),\n      );\n    }\n  }\n\n  if (explicitedTo.length !== 0) {\n    for (let i = 0; i < explicitedTo.length; i += limit) {\n      const toSlice = explicitedTo.slice(i, i + limit);\n      const amountSlice = explicitedToAmount\n        .slice(i, i + limit)\n        .map((v: bigint | null) => {\n          assert(v);\n          return (v * unit) / BigInt(10 ** 18);\n        });\n      airdrops.push(\n        // eslint-disable-next-line\n        contractInstance.methods\n          .airDropIndividual(address, toSlice, amountSlice)\n          .send({ from })\n          // eslint-disable-next-line\n          .then(() => {\n            progress += toSlice.length;\n            progressSetter(progress);\n          }),\n      );\n    }\n  }\n\n  return Promise.all(airdrops).then(EMPTY_FUNCTION);\n}\n\nexport default function Home(): React.ReactElement {\n  const ethereum = useContext<BaseProvider | null>(EthereumContext);\n  assert(ethereum);\n  // eslint-disable-next-line\n  const web3 = new Web3(ethereum as any);\n  const account = useContext<string | null>(AccountContext);\n\n  const [randomAddressesQuantity, setRandomAddressesQuantity] = useState(\"\");\n  const [minAmountRaw, setMinAmountRaw] = useState(\"\");\n  const [minAmount, setMinAmount] = useState<bigint | null>(BigInt(0));\n  const [maxAmountRaw, setMaxAmountRaw] = useState(\"\");\n  const [maxAmount, setMaxAmount] = useState<bigint | null>(BigInt(0));\n\n  const [selectedToken, setSelectedToken] = useState(0);\n  const [allowanceAmount, setAllowanceAmount] = useState<bigint>(BigInt(0));\n  const [defaultAmountRaw, setDefaultAmountRaw] = useState(\"\");\n  const [defaultAmount, setDefaultAmount] = useState<bigint | null>(null);\n  const [addressesPerTransaction, setAddressesPerTransaction] = useState(\"200\");\n  const [toRaw, setToRaw] = useState(\"\");\n  const [toList, setToList] = useState<To[] | null>(null);\n  const [isApproving, setIsApproving] = useState(false);\n  const [isGiving, setIsGiving] = useState(false);\n  const [isUpdatingAllowance, setIsUpdatingAllowance] = useState(false);\n  const [givedAddresses, setGivedAddresses] = useState(0);\n  const [decimal, setDecimal] = useState(\"\");\n\n  const token = TOKENS[selectedToken];\n\n  function updateAllowance() {\n    setIsUpdatingAllowance(true);\n    getAllowance(web3, selectedToken, account, SENDER)\n      .then((amount: number) => {\n        setAllowanceAmount(BigInt(amount));\n        setIsUpdatingAllowance(false);\n      }, EMPTY_FUNCTION);\n  }\n  useEffect(\n    () => {\n      updateAllowance();\n      setDecimal(String(token.decimal));\n    // eslint-disable-next-line\n    }, [selectedToken, account],\n  );\n\n  function updateToRaw(raw: string) {\n    setToRaw(raw);\n    setToList(parseAddresses(raw));\n  }\n\n  const isDefaultAmountNeeded = toList !== null && toList.some((to) => to.amount === null);\n  const isDefaultAmountInvalid = defaultAmountRaw === \"\" && isDefaultAmountNeeded;\n\n  return (\n    <Container className=\"mt-4\">\n      <Row className=\"justify-content-center\">\n        <h1>Airdrop</h1>\n      </Row>\n      <Row className=\"justify-content-center mt-3\">\n        <InputGroup hasValidation>\n          <Form.Control\n            as=\"textarea\"\n            className=\"Home__Addresses\"\n            value={toRaw}\n            onChange={(e) => updateToRaw(e.currentTarget.value)}\n            isInvalid={toList === null}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Please provide valid addresses with/without amount.\n          </Form.Control.Feedback>\n        </InputGroup>\n      </Row>\n      <Row className=\"justify-content-center mt-3\">\n        <Col xs=\"12\" className=\"mt-3\">\n          <InputGroup>\n            <InputGroup.Text>Random addresses quantity</InputGroup.Text>\n            <Form.Control\n              value={randomAddressesQuantity}\n              placeholder=\"amount\"\n              onChange={\n                (e) => updateIntegerByStr(e.currentTarget.value, setRandomAddressesQuantity)\n              }\n            />\n          </InputGroup>\n        </Col>\n        <Col xs=\"12\" md=\"6\" className=\"mt-3\">\n          <InputGroup>\n            <InputGroup.Text>Min amount</InputGroup.Text>\n            <Form.Control\n              value={minAmountRaw}\n              placeholder=\"amount\"\n              onChange={(e) => updateAmountByStr(\n                e.currentTarget.value,\n                setMinAmountRaw,\n                setMinAmount,\n              )}\n            />\n          </InputGroup>\n        </Col>\n        <Col xs=\"12\" md=\"6\" className=\"mt-3\">\n          <InputGroup>\n            <InputGroup.Text>Max amount</InputGroup.Text>\n            <Form.Control\n              value={maxAmountRaw}\n              placeholder=\"amount\"\n              onChange={(e) => updateAmountByStr(\n                e.currentTarget.value,\n                setMaxAmountRaw,\n                setMaxAmount,\n              )}\n            />\n          </InputGroup>\n        </Col>\n        <Col xs=\"auto\" className=\"mt-3\">\n          <Button\n            onClick={() => {\n              assert(maxAmount && minAmount);\n              const result = [];\n              for (let i = 0; i < Number(randomAddressesQuantity); i += 1) {\n                const { address } = web3.eth.accounts.create();\n                const amount = BigInt(\n                  Math.floor(Number(maxAmount - minAmount) * Math.random()),\n                ) + minAmount;\n                result.push(`${address} ${fixedDecimalToStr(amount, Number(decimal))}`);\n              }\n              updateToRaw(result.join(\"\\n\"));\n            }}\n            disabled={!minAmount || !maxAmount || randomAddressesQuantity === \"\"}\n          >\n            Generate\n          </Button>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center mt-3\">\n        <Col xs=\"auto\">\n          <ButtonGroup>\n            {TOKENS.map(({ id, name }) => (\n              <ToggleButton\n                key={id}\n                id={`token-${id}`}\n                name=\"tokens-radio\"\n                type=\"radio\"\n                variant=\"outline-primary\"\n                value={id}\n                checked={selectedToken === id}\n                onChange={(e) => setSelectedToken(Number(e.currentTarget.value))}\n              >\n                {name}\n              </ToggleButton>\n            ))}\n          </ButtonGroup>\n        </Col>\n        <Col xs=\"auto\" className=\"d-flex align-items-center\">\n          <Spinner\n            as=\"span\"\n            animation=\"border\"\n            size=\"sm\"\n            role=\"status\"\n            aria-hidden=\"true\"\n            className={`me-1 ${isUpdatingAllowance ? \"\" : \"d-none\"}`}\n          />\n          <p className=\"m-0\">\n            {token.address}\n            &nbsp;default decimal:&nbsp;\n            {token.decimal}\n          </p>\n        </Col>\n        <div className=\"w-100\" />\n        <Col xs=\"12\" md=\"6\" className=\"mt-3\">\n          <InputGroup hasValidation>\n            <InputGroup.Text>Default amount</InputGroup.Text>\n            <Form.Control\n              value={defaultAmountRaw}\n              placeholder=\"amount\"\n              onChange={(e) => updateAmountByStr(\n                e.currentTarget.value,\n                setDefaultAmountRaw,\n                setDefaultAmount,\n              )}\n              isInvalid={isDefaultAmountInvalid}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              Please provide amount for default.\n            </Form.Control.Feedback>\n          </InputGroup>\n        </Col>\n        <Col xs=\"12\" md=\"6\" className=\"mt-3\">\n          <InputGroup>\n            <InputGroup.Text>Addresses per transaction</InputGroup.Text>\n            <Form.Control\n              value={addressesPerTransaction}\n              placeholder=\"addresses number\"\n              onChange={\n                (e) => updateIntegerByStr(e.currentTarget.value, setAddressesPerTransaction)\n              }\n            />\n          </InputGroup>\n        </Col>\n        <Col xs=\"12\" className=\"mt-3\">\n          <InputGroup>\n            <InputGroup.Text>Decimal</InputGroup.Text>\n            <Form.Control\n              value={decimal}\n              placeholder=\"decimal\"\n              onChange={(e) => {\n                const { value } = e.currentTarget;\n                updateIntegerByStr(value, setDecimal);\n                if (value === \"0\") {\n                  setDecimal(value);\n                }\n              }}\n            />\n          </InputGroup>\n        </Col>\n        <Col xs=\"auto\" className=\"mt-3\">\n          <Button\n            onClick={async () => {\n              setIsApproving(true);\n              try {\n                await approve(\n                  web3,\n                  selectedToken,\n                  account,\n                  SENDER,\n                  // 2 ** 256 - 1\n                  BigInt(\"115792089237316195423570985008687907853269984665640564039457584007913129639935\"),\n                );\n              } finally {\n                setIsApproving(false);\n              }\n              updateAllowance();\n            }}\n            disabled={isApproving}\n            className={allowanceAmount !== BigInt(0) ? \"d-none\" : \"\"}\n          >\n            <Spinner\n              as=\"span\"\n              animation=\"border\"\n              size=\"sm\"\n              role=\"status\"\n              aria-hidden=\"true\"\n              className={`me-1 ${isApproving ? \"\" : \"d-none\"}`}\n            />\n            Approve\n          </Button>\n        </Col>\n        <Col xs=\"auto\" className=\"mt-3\">\n          <Button\n            variant=\"success\"\n            onClick={async () => {\n              setGivedAddresses(0);\n              setIsGiving(true);\n              try {\n                await airdrop(\n                  web3,\n                  selectedToken,\n                  account,\n                  toList,\n                  defaultAmount,\n                  Number(decimal),\n                  setGivedAddresses,\n                  Number(addressesPerTransaction),\n                );\n              } finally {\n                setIsGiving(false);\n              }\n              updateAllowance();\n            }}\n            disabled={\n              toList === null\n              || isDefaultAmountInvalid\n              || isGiving\n              || !toList.every((to) => web3.utils.isAddress(to.address))\n              || allowanceAmount === BigInt(0)\n              || decimal === \"\"\n              || addressesPerTransaction === \"\"\n            }\n          >\n            <Spinner\n              as=\"span\"\n              animation=\"border\"\n              size=\"sm\"\n              role=\"status\"\n              aria-hidden=\"true\"\n              className={`me-1 ${isGiving ? \"\" : \"d-none\"}`}\n            />\n            Airdrop\n            <span className={isGiving ? \"\" : \"d-none\"}>\n              &nbsp;\n              {givedAddresses}\n              /\n              {toList?.length}\n            </span>\n          </Button>\n        </Col>\n      </Row>\n      <Row className=\"mt-3\">\n        <Col>\n          <Table>\n            <thead>\n              <tr>\n                <th>Address</th>\n                <th>Amount</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                toList\n                  ? toList.map((to) => (\n                    <tr>\n                      <td>\n                        {to.address}\n                        <span className={`ms-4 text-danger ${web3.utils.isAddress(to.address) ? \"d-none\" : \"\"}`}>\n                          Invalid address\n                        </span>\n                      </td>\n                      <td className={to.amount ? \"\" : \"text-secondary\"}>\n                        {\n                          (() => {\n                            if (to.amount) {\n                              return fixedDecimalToStr(to.amount, Number(decimal));\n                            }\n                            if (defaultAmount) {\n                              return fixedDecimalToStr(defaultAmount, Number(decimal));\n                            }\n                            return \"\";\n                          })()\n                        }\n                      </td>\n                    </tr>\n                  ))\n                  : []\n              }\n            </tbody>\n          </Table>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import React, {\n  useState,\n} from \"react\";\nimport assert from \"assert\";\n\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\n\nexport default function ToggleButtons(\n  {\n    selects,\n    groupName,\n    onChange,\n  }: {\n    selects: Array<{ id: number, value: number, name: string }>,\n    groupName: string,\n    onChange: (_: number) => void,\n  },\n): React.ReactElement {\n  const [selectedId, setSelectedId] = useState(0);\n  return (\n    <ButtonGroup>\n      {selects.map(({ id, name }) => (\n        <ToggleButton\n          key={id}\n          id={`${groupName}-${id}`}\n          name={`${groupName}s-radio`}\n          type=\"radio\"\n          variant=\"outline-primary\"\n          value={id}\n          checked={selectedId === id}\n          onChange={(e) => {\n            const changeId = Number(e.currentTarget.value);\n            setSelectedId(changeId);\n            const select = selects.find((s) => s.id === changeId);\n            assert(select);\n            onChange(select.value);\n          }}\n        >\n          {name}\n        </ToggleButton>\n      ))}\n    </ButtonGroup>\n  );\n}\n","import \"./NFT.scss\";\n\nimport React, {\n  useState,\n  useContext,\n} from \"react\";\nimport Web3 from \"web3\";\nimport { AbiItem } from \"web3-utils\";\nimport assert from \"assert\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Row from \"react-bootstrap/Row\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Table from \"react-bootstrap/Table\";\n\nimport { BaseProvider } from \"@metamask/providers\";\n\nimport ToggleButtons from \"../../components/ToggleButtons/ToggleButtons\";\n\nimport {\n  EthereumContext,\n  AccountContext,\n  EMPTY_FUNCTION,\n  updateIntegerByStr,\n  validatePositiveInteger,\n} from \"../../utils/utils\";\n\nfunction parseAddresses(raw: string): string[] | null {\n  const toList: string[] = [];\n\n  const isValid = raw\n    .replaceAll(\",\", \" \")\n    .replaceAll(\"\\n\", \" \")\n    .replaceAll('\"', \"\")\n    .replaceAll(\"'\", \"\")\n    .replaceAll(\"`\", \"\")\n    .replaceAll(/  */g, \" \")\n    .trim()\n    .split(\" \")\n    .every((value) => {\n      if (!value.startsWith(\"0x\")) {\n        return false;\n      }\n      toList.push(value);\n      return true;\n    });\n\n  if (isValid) {\n    return toList;\n  }\n\n  return null;\n}\n\nconst CONTRACT_ABIS = [\n  {\n    inputs: [\n      { internalType: \"address[]\", name: \"owners\", type: \"address[]\" },\n      { internalType: \"uint256\", name: \"intentionQuality\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"intention\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"level\", type: \"uint256\" },\n    ],\n    name: \"forgeMaintainer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address[]\", name: \"owners\", type: \"address[]\" },\n      { internalType: \"uint256\", name: \"intention\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"level\", type: \"uint256\" },\n    ],\n    name: \"forgeCaptainMaintainer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst NFTS = [\n  { id: 0, value: 0, name: \"Warship\" },\n  { id: 1, value: 1, name: \"Captain\" },\n];\n\nconst QUALITIES = [\n  { id: 0, value: 40000, name: \"Purple\" },\n  { id: 1, value: 50000, name: \"Gold\" },\n];\n\nconst INTENTIONS = [\n  { id: 0, value: 1, name: \"Min\" },\n  { id: 1, value: 2, name: \"Mean\" },\n  { id: 2, value: 3, name: \"Max\" },\n  { id: 3, value: 4, name: \"Random\" },\n];\n\nconst SENDER = \"0x3a9AF5ea13625984EFFBf0cCc1c72580e3e3b7F1\";\n\nfunction airdropMaintainer(\n  web3: Web3,\n  from: string | null,\n  toList: string[] | null,\n  quality: number,\n  intention: number,\n  level: number,\n  progressSetter: (_: number) => void,\n  limit: number,\n): Promise<void> {\n  if (!from || !toList) {\n    return Promise.resolve();\n  }\n\n  const contractInstance = new web3.eth.Contract(CONTRACT_ABIS as AbiItem[], SENDER);\n\n  const airdrops = [];\n  let progress = 0;\n  for (let i = 0; i < toList.length; i += limit) {\n    const toSlice = toList.slice(i, i + limit);\n    airdrops.push(\n      // eslint-disable-next-line\n      contractInstance.methods\n        .forgeMaintainer(toSlice, quality, intention, level)\n        .send({ from })\n        // eslint-disable-next-line\n        .then(() => {\n          progress += toSlice.length;\n          progressSetter(progress);\n        }),\n    );\n  }\n\n  return Promise.all(airdrops).then(EMPTY_FUNCTION);\n}\n\nfunction airdropCaptainMaintainer(\n  web3: Web3,\n  from: string | null,\n  toList: string[] | null,\n  intention: number,\n  level: number,\n  progressSetter: (_: number) => void,\n  limit: number,\n): Promise<void> {\n  if (!from || !toList) {\n    return Promise.resolve();\n  }\n\n  const contractInstance = new web3.eth.Contract(CONTRACT_ABIS as AbiItem[], SENDER);\n\n  const airdrops = [];\n  let progress = 0;\n  for (let i = 0; i < toList.length; i += limit) {\n    const toSlice = toList.slice(i, i + limit);\n    airdrops.push(\n      // eslint-disable-next-line\n      contractInstance.methods\n        .forgeCaptainMaintainer(toSlice, intention, level)\n        .send({ from })\n        // eslint-disable-next-line\n        .then(() => {\n          progress += toSlice.length;\n          progressSetter(progress);\n        }),\n    );\n  }\n\n  return Promise.all(airdrops).then(EMPTY_FUNCTION);\n}\n\nexport default function NFT(): React.ReactElement {\n  const ethereum = useContext<BaseProvider | null>(EthereumContext);\n  assert(ethereum);\n  // eslint-disable-next-line\n  const web3 = new Web3(ethereum as any);\n  const account = useContext<string | null>(AccountContext);\n\n  const [selectedNFT, setSelectedNFT] = useState(0);\n  const [selectedQuality, setSelectedQuality] = useState(40000);\n  const [selectedIntention, setSelectedIntention] = useState(1);\n  const [level, setLevel] = useState(\"\");\n  const [addressesPerTransaction, setAddressesPerTransaction] = useState(\"50\");\n  const [toList, setToList] = useState<string[] | null>(null);\n  const [isGiving, setIsGiving] = useState(false);\n  const [givedAddresses, setGivedAddresses] = useState(0);\n\n  return (\n    <Container className=\"mt-4\">\n      <Row className=\"justify-content-center\">\n        <h1>NFT airdrop</h1>\n      </Row>\n      <Row className=\"justify-content-center mt-3\">\n        <InputGroup hasValidation>\n          <Form.Control\n            as=\"textarea\"\n            className=\"NFT__Addresses\"\n            onChange={(e) => setToList(parseAddresses(e.currentTarget.value))}\n            isInvalid={toList === null}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Please provide valid addresses.\n          </Form.Control.Feedback>\n        </InputGroup>\n      </Row>\n      <Row className=\"justify-content-center mt-3\">\n        <Col xs=\"auto\">\n          <ToggleButtons selects={NFTS} groupName=\"nft\" onChange={setSelectedNFT} />\n        </Col>\n        <Col xs=\"auto\" className={selectedNFT === 0 ? \"\" : \"d-none\"}>\n          <ToggleButtons selects={QUALITIES} groupName=\"quality\" onChange={setSelectedQuality} />\n        </Col>\n        <Col xs=\"auto\">\n          <ToggleButtons selects={INTENTIONS} groupName=\"intention\" onChange={setSelectedIntention} />\n        </Col>\n        <div className=\"w-100\" />\n        <Col xs=\"12\" md=\"6\" className=\"mt-3\">\n          <InputGroup>\n            <InputGroup.Text>Level</InputGroup.Text>\n            <Form.Control\n              value={level}\n              placeholder=\"level number\"\n              onChange={\n                (e) => updateIntegerByStr(\n                  e.currentTarget.value,\n                  (raw) => {\n                    if (raw === \"\") {\n                      setLevel(raw);\n                    }\n                    const value = BigInt(raw);\n                    if (BigInt(1) <= value && value <= BigInt(30)) {\n                      setLevel(raw);\n                    }\n                  },\n                )\n              }\n            />\n          </InputGroup>\n        </Col>\n        <Col xs=\"12\" md=\"6\" className=\"mt-3\">\n          <InputGroup>\n            <InputGroup.Text>Addresses per transaction</InputGroup.Text>\n            <Form.Control\n              value={addressesPerTransaction}\n              placeholder=\"addresses number\"\n              onChange={\n                (e) => updateIntegerByStr(e.currentTarget.value, setAddressesPerTransaction)\n              }\n            />\n          </InputGroup>\n        </Col>\n        <Col xs=\"auto\" className=\"mt-3\">\n          <Button\n            variant=\"success\"\n            onClick={async () => {\n              setGivedAddresses(0);\n              setIsGiving(true);\n              try {\n                if (selectedNFT === 0) {\n                  await airdropMaintainer(\n                    web3,\n                    account,\n                    toList,\n                    selectedQuality,\n                    selectedIntention,\n                    Number(level),\n                    setGivedAddresses,\n                    Number(addressesPerTransaction),\n                  );\n                } else {\n                  await airdropCaptainMaintainer(\n                    web3,\n                    account,\n                    toList,\n                    selectedIntention,\n                    Number(level),\n                    setGivedAddresses,\n                    Number(addressesPerTransaction),\n                  );\n                }\n              } finally {\n                setIsGiving(false);\n              }\n            }}\n            disabled={\n              toList === null\n              || isGiving\n              || !toList.every((to) => web3.utils.isAddress(to))\n              || !validatePositiveInteger(level)\n            }\n          >\n            <Spinner\n              as=\"span\"\n              animation=\"border\"\n              size=\"sm\"\n              role=\"status\"\n              aria-hidden=\"true\"\n              className={`me-1 ${isGiving ? \"\" : \"d-none\"}`}\n            />\n            Airdrop\n            <span className={isGiving ? \"\" : \"d-none\"}>\n              &nbsp;\n              {givedAddresses}\n              /\n              {toList?.length}\n            </span>\n          </Button>\n        </Col>\n      </Row>\n      <Row className=\"mt-3\">\n        <Col>\n          <Table>\n            <thead>\n              <tr>\n                <th>Address</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                toList\n                  ? toList.map((to) => (\n                    <tr>\n                      <td>\n                        {to}\n\n                        <span className={`ms-4 text-danger ${web3.utils.isAddress(to) ? \"d-none\" : \"\"}`}>\n                          Invalid address\n                        </span>\n                      </td>\n                    </tr>\n                  ))\n                  : []\n              }\n            </tbody>\n          </Table>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import React from \"react\";\n\nimport { Switch, Route, Redirect } from \"react-router-dom\";\n\nimport Home from \"./views/Home/Home\";\nimport NFT from \"./views/NFT/NFT\";\n\nexport default function Routes(): React.ReactElement {\n  return (\n    <Switch>\n      <Route path=\"/nft\">\n        <NFT />\n      </Route>\n      <Route path=\"/home\">\n        <Home />\n      </Route>\n      <Route path=\"/\">\n        <Redirect to=\"/home\" />\n      </Route>\n    </Switch>\n  );\n}\n","import \"./App.scss\";\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { HashRouter, NavLink } from \"react-router-dom\";\n\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport { BaseProvider } from \"@metamask/providers\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Row from \"react-bootstrap/Row\";\n\nimport { EthereumContext, AccountContext, EMPTY_FUNCTION } from \"./utils/utils\";\n\nimport Routes from \"./Routes\";\n\nconst ERROR_NETWORK_NOT_ADDED = 4902;\nconst CHAIN_ID = \"0x42\";\n\nasync function switchToChain(ethereum: BaseProvider) {\n  try {\n    await ethereum.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{ chainId: CHAIN_ID }],\n    });\n  } catch (switchError) {\n    const { code }: { code: number } = switchError as { code: number };\n\n    if (code !== ERROR_NETWORK_NOT_ADDED) {\n      return code;\n    }\n  }\n\n  return null;\n}\n\nasync function prepareChain(ethereum: BaseProvider) {\n  const switched = await switchToChain(ethereum);\n  if (switched && switched !== ERROR_NETWORK_NOT_ADDED) {\n    return false;\n  }\n\n  try {\n    await ethereum.request({\n      method: \"wallet_addEthereumChain\",\n      params: [{\n        chainId: CHAIN_ID,\n        chainName: \"OKExChain Mainnet\",\n        nativeCurrency: { name: \"OKT\", symbol: \"OKT\", decimals: 18 },\n        rpcUrls: [\"https://exchainrpc.okex.org\"],\n        blockExplorerUrls: [\"https://www.oklink.com/okexchain\"],\n      }],\n    });\n  } catch (addError) {\n    return false;\n  }\n\n  return !(await switchToChain(ethereum));\n}\n\nfunction App(): React.ReactElement {\n  const [ethereum, setEthereum] = useState<BaseProvider | null>(null);\n  const [account, setAccount] = useState<string | null>(null);\n  const [isOnChain, setIsOnChain] = useState(false);\n\n  detectEthereumProvider()\n    .then(\n      (provider) => { (setEthereum as (_: unknown) => void)(provider); },\n      EMPTY_FUNCTION,\n    );\n\n  const updateSelectedAccount = useCallback(\n    () => {\n      if (!ethereum) {\n        return;\n      }\n\n      setAccount(ethereum.selectedAddress);\n    },\n    [ethereum],\n  );\n\n  function connect() {\n    if (!ethereum) {\n      return;\n    }\n    ethereum.request({ method: \"eth_requestAccounts\" })\n      .then(updateSelectedAccount, EMPTY_FUNCTION);\n  }\n\n  useEffect(\n    () => {\n      if (!ethereum) {\n        return EMPTY_FUNCTION;\n      }\n\n      ethereum.request({ method: \"eth_accounts\" })\n        .then(updateSelectedAccount, EMPTY_FUNCTION);\n\n      ethereum.on(\"accountsChanged\", updateSelectedAccount);\n      return () => {\n        ethereum.removeListener(\"accountsChanged\", updateSelectedAccount);\n      };\n    },\n    [ethereum, updateSelectedAccount],\n  );\n\n  useEffect(\n    () => {\n      if (!ethereum) {\n        return;\n      }\n\n      prepareChain(ethereum).then(setIsOnChain, EMPTY_FUNCTION);\n    },\n    [ethereum],\n  );\n\n  if (!ethereum) {\n    return <div>You must installed MetaMask to use Celestial dashboard!</div>;\n  }\n\n  if (!isOnChain) {\n    return (<div>You are not on chain!</div>);\n  }\n\n  if (!account) {\n    return (\n      <Container>\n        <Row className=\"justify-content-center\">\n          <Col xs=\"auto\">You must connect to MetaMask to use Celestial dashboard!</Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <Col xs=\"auto\">\n            <Button onClick={() => connect()}>Connect</Button>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  return (\n    <EthereumContext.Provider value={ethereum}>\n      <AccountContext.Provider value={account}>\n        <HashRouter>\n          <Navbar>\n            <Container>\n              <Nav>\n                <NavLink to=\"/home\" className=\"me-3 text-decoration-none\">\n                  Airdrop\n                </NavLink>\n                <NavLink to=\"/nft\" className=\"text-decoration-none\">\n                  NFT airdrop\n                </NavLink>\n              </Nav>\n              <Navbar.Brand>{account}</Navbar.Brand>\n            </Container>\n          </Navbar>\n          <Routes />\n        </HashRouter>\n      </AccountContext.Provider>\n    </EthereumContext.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}