{"version":3,"sources":["utils/utils.ts","views/Box/Box.tsx","views/Home/Home.tsx","components/ToggleButtons/ToggleButtons.tsx","components/RangeInput/RangeInput.tsx","views/NFT/NFT.tsx","Routes.tsx","App.tsx","index.jsx"],"names":["EthereumContext","createContext","AccountContext","ChainContext","EMPTY_FUNCTION","validatePositiveInteger","raw","value","BigInt","String","_","FIXED_DECIMAL_UNIT","validatePositiveFixedDecimal","split","length","left","full","replace","fixedDecimalToStr","decimal","right","rightRaw","padStart","slice","updateAmountByStr","setter","valSetter","match","updateIntegerByStr","NFTMANAGER_ADDRESS","CHAIN_INFO","name","networkId","chainId","Box","ethereum","useContext","account","chain","assert","web3","Web3","nftManagerContract","eth","Contract","NFTManagerABI","useState","privateKey","setPrivateKey","targetShipAmount","setTargetShipAmount","unlockedBoxBalance","setUnlockedBoxBalance","targetShipCount","setTargetShipCount","opening","setOpening","getBoxBalance","a","methods","mintRequestRecord","call","unlockRecord","requestChestAmount","openBox","abiDecoder","require","addABI","opts","common","Common","custom","privateKeyBuffer","Buffer","from","shipCount","boxBalance","openAmount","Math","min","calldata","forgeContinue","encodeABI","gasPrice","getTransactionCount","nonce","tx","Transaction","gasLimit","to","data","console","log","signedTx","sign","serializedTx","serialize","toString","sendSignedTransaction","receipt","decodedLog","decodeLogs","logs","filteredLog","filter","item","forEach","parseInt","events","then","res","catch","err","useEffect","className","onChange","event","target","handleTargetShipAmountChange","TextArea","rows","handlePrivateKeyChange","type","onClick","To","address","amount","this","TOKENS","id","SHARDS","CONTRACT_ABIS","inputs","components","internalType","outputs","stateMutability","SENDERS","airdrop","index","toList","defaultAmount","progressSetter","limit","unit","contractInstance","params","map","amo","method","p","batchTransferCelt","purchaseChestSudo","mintMysteryBoxSudo","mintShardAuth","t","forgeDesignated","airdrops","progress","i","toSlice","push","send","Promise","all","Home","randomAddressesQuantity","setRandomAddressesQuantity","minAmountRaw","setMinAmountRaw","minAmount","setMinAmount","maxAmountRaw","setMaxAmountRaw","maxAmount","setMaxAmount","selectedToken","setSelectedToken","tokenId","setTokenId","defaultAmountRaw","setDefaultAmountRaw","setDefaultAmount","addressesPerTransaction","setAddressesPerTransaction","toRaw","setToRaw","setToList","isGiving","setIsGiving","givedAddresses","setGivedAddresses","setDecimal","token","updateToRaw","previousAddress","replaceAll","trim","every","startsWith","parseAddresses","isDefaultAmountNeeded","some","isDefaultAmountInvalid","Container","Row","InputGroup","hasValidation","Form","Control","as","e","currentTarget","isInvalid","Feedback","Col","xs","Text","placeholder","md","Button","result","Number","accounts","create","floor","random","join","disabled","ButtonGroup","ToggleButton","variant","checked","utils","isAddress","Spinner","animation","size","role","Table","ToggleButtons","selects","groupName","selectedId","setSelectedId","changeId","select","find","s","RangeInput","text","defaultValue","max","setRaw","setIsInvalid","update","v","defaultProps","NFTS","QUALITIES","INTENTIONS","SUPREME_SPECIFIC_VALUES","range","CAPTAIN_SPECIFIC_VALUES","SKINS","airdropMaintainer","quality","intention","level","specificValues","skin","resolve","forgeSupremeAuth","airdropCaptainMaintainer","recruitCaptainAuth","NFT","selectedNFT","setSelectedNFT","selectedQuality","setSelectedQuality","selectedIntention","setSelectedIntention","setSpecificValues","selectedSkin","setSelectedSkin","setLevel","specificValuesInvalid","o","Routes","path","ERROR_NETWORK_NOT_ADDED","CHAINS","chainName","nativeCurrency","symbol","decimals","rpcUrls","blockExplorerUrls","switchToChain","selectedChain","request","code","prepareChain","setSelectedChain","toChain","switched","App","setEthereum","setAccount","isOnChain","setIsOnChain","currentChain","setCurrentChain","detectEthereumProvider","provider","updateSelectedAccount","useCallback","selectedAddress","updateChain","on","removeListener","Provider","Navbar","Nav","Select","Brand","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5662985.chunk.js","sourcesContent":["import { createContext, useEffect } from \"react\";\n\nimport { BaseProvider } from \"@metamask/providers\";\n\nexport const EthereumContext = createContext<BaseProvider | null>(null);\nexport const AccountContext = createContext<string | null>(null);\nexport const ChainContext = createContext<number>(0);\n\nexport function useMountState(callback: () => void): void {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(callback, []);\n}\n\nexport function EMPTY_FUNCTION(): void { /* ignore promise handling */ }\n\nexport function validatePositiveInteger(raw: string): bigint | null {\n  try {\n    const value = BigInt(raw);\n    if (String(value) === raw && value > 0) {\n      return value;\n    }\n  } catch (_) { /* do nothing */ }\n  return null;\n}\n\nconst FIXED_DECIMAL_UNIT = BigInt(10 ** 18);\nexport function validatePositiveFixedDecimal(raw: string): bigint | null {\n  try {\n    const value = raw.split(\".\");\n    if (value.length > 2 || value.length === 0) {\n      return null;\n    }\n    const left = validatePositiveInteger(value[0]);\n    if (value.length === 1) {\n      if (!left) {\n        return null;\n      }\n      return left * FIXED_DECIMAL_UNIT;\n    }\n    if (value[0] !== \"0\" && value[0] !== \"\" && !left) {\n      return null;\n    }\n    const full = validatePositiveInteger(raw.replace(\".\", \"\").replace(/^0*/g, \"\"));\n    if (!full || value[1].length > 18) {\n      return null;\n    }\n    return full * BigInt(10 ** (18 - value[1].length));\n  } catch (_) { /* do nothing */ }\n  return null;\n}\n\nexport function fixedDecimalToStr(value: bigint, decimal: number): string {\n  const left = value / BigInt(10 ** 18);\n  const right = value - left * BigInt(10 ** 18);\n  if (right === BigInt(0) || decimal === 0) {\n    return String(left);\n  }\n  let rightRaw = String(right).padStart(18, \"0\");\n  if (rightRaw.length > decimal) {\n    rightRaw = rightRaw.slice(0, decimal);\n  }\n  return `${left}.${rightRaw}`.replace(/0*$/g, \"\");\n}\n\nexport function updateAmountByStr(\n  raw: string,\n  setter: (_: string) => void,\n  valSetter?: (_: bigint | null) => void,\n): void {\n  const value = validatePositiveFixedDecimal(raw);\n  if (raw === \"\" || raw === \"0\" || raw.match(/^0\\.0*$/g) || value !== null) {\n    setter(raw);\n    if (valSetter) {\n      valSetter(value);\n    }\n  }\n}\n\nexport function updateIntegerByStr(\n  raw: string,\n  setter: (_: string) => void,\n  valSetter?: (_: bigint | null) => void,\n): void {\n  const value = validatePositiveInteger(raw);\n  if (raw === \"\" || value !== null) {\n    setter(raw);\n    if (valSetter) {\n      valSetter(value);\n    }\n  }\n}\n","import React, { useState, useContext, useEffect } from \"react\";\nimport \"./Box.scss\";\nimport \"antd/dist/antd.css\";\nimport { Input, Button } from \"antd\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport assert from \"assert\";\nimport Web3 from \"web3\";\nimport { AbiItem } from \"web3-utils\";\nimport { Transaction } from \"@ethereumjs/tx\";\nimport Common from \"@ethereumjs/common\";\nimport {\n  EthereumContext,\n  AccountContext,\n  ChainContext,\n} from \"../../utils/utils\";\n\nimport { abi as NFTManagerABI } from \"../../contracts/NFTManager.json\";\n\nconst BATCH_SIZE = 40;\n\nconst NFTMANAGER_ADDRESS = [\n  \"0x3a9AF5ea13625984EFFBf0cCc1c72580e3e3b7F1\",\n  \"0x3A194300A253597a1572b63D350074B9DA3C9039\",\n];\n\nconst CHAIN_INFO = [\n  {\n    name: \"oec\",\n    networkId: 66,\n    chainId: 66,\n  },\n  {\n    name: \"bsc\",\n    networkId: 56,\n    chainId: 56,\n  },\n];\n\nconst Box: React.FC = () => {\n  const ethereum = useContext(EthereumContext);\n  const account = useContext(AccountContext);\n  const chain = useContext(ChainContext);\n\n  assert(ethereum);\n  // eslint-disable-next-line\n  const web3 = new Web3(ethereum as any);\n\n  const nftManagerContract = new web3.eth.Contract(\n    NFTManagerABI as AbiItem[],\n    NFTMANAGER_ADDRESS[chain],\n  );\n\n  const [privateKey, setPrivateKey] = useState(\"\");\n  const [targetShipAmount, setTargetShipAmount] = useState(0);\n  const [unlockedBoxBalance, setUnlockedBoxBalance] = useState(0);\n  const [targetShipCount, setTargetShipCount] = useState(0);\n  const [opening, setOpening] = useState(false);\n\n  const getBoxBalance = async () => {\n    // eslint-disable-next-line\n    const unlockRecord = await nftManagerContract.methods\n      .mintRequestRecord(account)\n      .call();\n    // eslint-disable-next-line\n    const unlockedBoxBalance: number = unlockRecord.requestChestAmount;\n    setUnlockedBoxBalance(unlockedBoxBalance);\n    return unlockedBoxBalance;\n  };\n\n  const handleTargetShipAmountChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const value = event.target.value ? event.target.value : \"0\";\n    setTargetShipAmount(parseInt(value, 10));\n  };\n\n  const handlePrivateKeyChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setPrivateKey(event.target.value);\n  };\n\n  // const getGasPrice = async () => {\n  //   if (!web3) {\n  //     return 1000000000;\n  //   }\n  //   return Math.min(\n  //     10000000000,\n  //     Math.floor(parseInt(await web3.eth.getGasPrice(), 10) * 1.2),\n  //   );\n  // };\n\n  /* eslint-disable*/\n  const openBox = async () => {\n    try {\n      setOpening(true);\n      const abiDecoder = require(\"abi-decoder\");\n      abiDecoder.addABI(NFTManagerABI);\n      const opts = { common: Common.custom(CHAIN_INFO[chain]) };\n      const privateKeyBuffer = Buffer.from(privateKey, \"hex\");\n\n      let shipCount = 0;\n      let boxBalance = unlockedBoxBalance;\n      while (shipCount < targetShipAmount && boxBalance > 0) {\n        const openAmount = Math.min(BATCH_SIZE, boxBalance);\n        const calldata = nftManagerContract.methods\n          .forgeContinue(openAmount)\n          .encodeABI();\n        // const gasPrice = await getGasPrice();\n        const gasPrice = 10 ** 8;\n        const nonce = await web3.eth.getTransactionCount(account as string);\n        const tx = new Transaction(\n          {\n            nonce: nonce,\n            gasPrice: gasPrice,\n            gasLimit: 4000000,\n            to: NFTMANAGER_ADDRESS[chain],\n            value: 0,\n            data: calldata,\n          },\n          opts,\n        );\n        console.log(tx);\n        const signedTx = tx.sign(privateKeyBuffer);\n        const serializedTx = `0x${signedTx.serialize().toString(\"hex\")}`;\n\n        // console.log(serializedTx);\n        const receipt = await web3.eth.sendSignedTransaction(serializedTx);\n        const decodedLog = abiDecoder.decodeLogs(receipt.logs);\n        const filteredLog = decodedLog.filter(\n          (item: any) => item.name === \"MintNft\",\n        );\n        console.log(filteredLog);\n        filteredLog.forEach((item: any) => {\n          if (parseInt(item.events[3].value) !== 0) {\n            shipCount++;\n            setTargetShipCount(shipCount);\n          }\n        });\n        console.log(shipCount);\n        getBoxBalance()\n          .then((res) => {\n            boxBalance = res;\n            console.log(boxBalance);\n          })\n          .catch((err) => console.log(err));\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setOpening(false);\n    }\n  };\n  /* eslint-disable*/\n\n  const handleStart = () => {\n    // reset counter, stop flag\n    setTargetShipCount(0);\n    openBox().catch((err) => console.log(err));\n  };\n\n  useEffect(() => {\n    getBoxBalance().catch((err) => console.log(err));\n  }, [ethereum, account, chain]);\n\n  return (\n    <div className=\"box\">\n      <div className=\"container\">\n        <h1 className=\"title\">Open Box</h1>\n        {chain === 0 ? (\n          <div className=\"contentWrap\">\n            <div className=\"boxAmountWrap\">\n              <h3 className=\"amountTitle\">Unlocked Box Amount</h3>\n              <p className=\"amountValue\">{unlockedBoxBalance}</p>\n            </div>\n            <div className=\"inputItem\">\n              <h3 className=\"itemTitle\">Target Ship Amount</h3>\n              <Input\n                value={targetShipAmount}\n                onChange={(event) => {\n                  handleTargetShipAmountChange(event);\n                }}\n              />\n            </div>\n            <div className=\"inputItem\">\n              <h3 className=\"itemTitle\">Private Key</h3>\n              <Input.TextArea\n                rows={4}\n                value={privateKey}\n                onChange={(event) => {\n                  handlePrivateKeyChange(event);\n                }}\n              />\n            </div>\n            <Button className=\"button\" type=\"primary\" onClick={handleStart}>\n              Open\n              {opening && <LoadingOutlined />}\n            </Button>\n            <div className=\"boxAmountWrap\">\n              <h3 className=\"amountTitle\">Target Ship Count</h3>\n              <p className=\"amountValue\">{targetShipCount}</p>\n            </div>\n          </div>\n        ) : (\n          <div className=\"contentWrap\">Please switch to OEC</div>\n        )}\n      </div>\n    </div>\n  );\n};\nexport default Box;\n","import \"./Home.scss\";\n\nimport React, {\n  useState,\n  useContext,\n  useEffect,\n} from \"react\";\nimport Web3 from \"web3\";\nimport { AbiItem } from \"web3-utils\";\nimport assert from \"assert\";\n\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Row from \"react-bootstrap/Row\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Table from \"react-bootstrap/Table\";\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\n\nimport { BaseProvider } from \"@metamask/providers\";\n\nimport {\n  EthereumContext,\n  AccountContext,\n  ChainContext,\n  updateAmountByStr,\n  updateIntegerByStr,\n  validatePositiveFixedDecimal,\n  fixedDecimalToStr,\n} from \"../../utils/utils\";\n\nclass To {\n  address: string;\n\n  amount: bigint | null;\n\n  constructor(address: string, amount: bigint | null) {\n    this.address = address;\n    this.amount = amount;\n  }\n}\n\nfunction parseAddresses(raw: string): To[] | null {\n  const toList: To[] = [];\n  let previousAddress: To | null = null;\n\n  const isValid = raw\n    .replaceAll(\",\", \" \")\n    .replaceAll(\"\\n\", \" \")\n    .replaceAll('\"', \"\")\n    .replaceAll(\"'\", \"\")\n    .replaceAll(\"`\", \"\")\n    .replaceAll(/  */g, \" \")\n    .trim()\n    .split(\" \")\n    .every((value) => {\n      if (value.startsWith(\"0x\")) {\n        previousAddress = new To(value, null);\n        toList.push(previousAddress);\n        return true;\n      }\n      const amount = validatePositiveFixedDecimal(value);\n      if (amount) {\n        if (previousAddress === null || previousAddress.amount !== null) {\n          return false;\n        }\n        previousAddress.amount = amount;\n      } else {\n        return false;\n      }\n      return true;\n    });\n\n  if (isValid) {\n    return toList;\n  }\n\n  return null;\n}\n\nconst TOKENS = [\n  [\n    { id: 0, name: \"Celt\", decimal: 18 },\n    { id: 1, name: \"CeltChest\", decimal: 0 },\n    { id: 2, name: \"MysteryBox\", decimal: 0 },\n    { id: 3, name: \"Shard\", decimal: 0 },\n    { id: 4, name: \"Common\", decimal: 0 },\n  ],\n];\n\nconst SHARDS = [\n  { id: 1, name: \"Diamond\", decimal: 0 },\n  { id: 2, name: \"Emerald\", decimal: 0 },\n  { id: 3, name: \"Sapphire\", decimal: 0 },\n  { id: 4, name: \"Amethystine\", decimal: 0 },\n  { id: 5, name: \"Topaz\", decimal: 0 },\n  { id: 6, name: \"Ruby\", decimal: 0 },\n];\n\nconst CONTRACT_ABIS = [\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"address\", name: \"who\", type: \"address\" },\n          { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n        ],\n        internalType: \"struct CelestialManagerType.BatchTransferCeltParam[]\",\n        name: \"params\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"batchTransferCelt\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"address\", name: \"owner\", type: \"address\" },\n          { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n        ],\n        internalType: \"struct CelestialManagerType.PurchaseChestAuthParam[]\",\n        name: \"params\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"purchaseChestSudo\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"address\", name: \"owner\", type: \"address\" },\n          { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n        ],\n        internalType: \"struct CelestialManagerType.MintMysteryBoxAuthParam[]\",\n        name: \"params\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"mintMysteryBoxSudo\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"address\", name: \"owner\", type: \"address\" },\n          { internalType: \"uint256\", name: \"shardId\", type: \"uint256\" },\n          { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n        ],\n        internalType: \"struct CelestialManagerType.MintShardAuthParam[]\",\n        name: \"params\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"mintShardAuth\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          { internalType: \"address\", name: \"owner\", type: \"address\" },\n          {\n            components: [\n              { internalType: \"uint256\", name: \"commonId\", type: \"uint256\" },\n              { internalType: \"uint256\", name: \"commonAmount\", type: \"uint256\" },\n            ],\n            internalType: \"struct CelestialManagerType.ForgeDesignatedParamCommon[]\",\n            name: \"commonParams\",\n            type: \"tuple[]\",\n          },\n          {\n            components: [\n              { internalType: \"bytes32[]\", name: \"attributeNames\", type: \"bytes32[]\" },\n              { internalType: \"uint256[]\", name: \"attributeValues\", type: \"uint256[]\" },\n            ],\n            internalType: \"struct CelestialManagerType.ForgeDesignatedParamSupreme[]\",\n            name: \"supremeParams\",\n            type: \"tuple[]\",\n          },\n        ],\n        internalType: \"struct CelestialManagerType.ForgeDesignatedParam[]\",\n        name: \"params\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"forgeDesignated\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst SENDERS = [\"0xc443033Fa0822afCe3707bE4c084cD72c9f05666\"];\n\nasync function airdrop(\n  web3: Web3,\n  chain: number,\n  index: number,\n  from: string | null,\n  toList: To[] | null,\n  defaultAmount: bigint | null,\n  decimal: number,\n  progressSetter: (_: number) => void,\n  limit: number,\n  id: bigint | null,\n): Promise<void> {\n  if (!from || !toList) {\n    return;\n  }\n  const unit = BigInt(10 ** decimal);\n\n  const contractInstance = new web3.eth.Contract(CONTRACT_ABIS as AbiItem[], SENDERS[chain]);\n\n  const params = toList.map(({ address, amount }) => {\n    let amo = amount;\n    if (amo === null) {\n      assert(defaultAmount);\n      amo = defaultAmount;\n    }\n    return [address, (amo * unit) / BigInt(10 ** 18)];\n  });\n\n  const method = [\n    // eslint-disable-next-line\n    (p: (string | bigint)[][]) => contractInstance.methods.batchTransferCelt(p),\n    // eslint-disable-next-line\n    (p: (string | bigint)[][]) => contractInstance.methods.purchaseChestSudo(p),\n    // eslint-disable-next-line\n    (p: (string | bigint)[][]) => contractInstance.methods.mintMysteryBoxSudo(p),\n    (p: (string | bigint)[][]) => (\n      // eslint-disable-next-line\n      contractInstance.methods.mintShardAuth(p.map((t) => [t[0], id, t[1]]))\n    ),\n    (p: (string | bigint)[][]) => (\n      // eslint-disable-next-line\n      contractInstance.methods.forgeDesignated(p.map((t) => [t[0], [[id, t[1]]], []]))\n    ),\n  ][index];\n\n  const airdrops = [];\n  let progress = 0;\n  for (let i = 0; i < params.length; i += limit) {\n    const toSlice = params.slice(i, i + limit);\n    airdrops.push(\n      // eslint-disable-next-line\n      method(toSlice)\n        .send({ from })\n        // eslint-disable-next-line\n        .then(() => {\n          progress += toSlice.length;\n          progressSetter(progress);\n        }),\n    );\n  }\n\n  await Promise.all(airdrops);\n}\n\nexport default function Home(): React.ReactElement {\n  const ethereum = useContext<BaseProvider | null>(EthereumContext);\n  assert(ethereum);\n  // eslint-disable-next-line\n  const web3 = new Web3(ethereum as any);\n  const account = useContext<string | null>(AccountContext);\n  const chain = useContext<number>(ChainContext);\n\n  const [randomAddressesQuantity, setRandomAddressesQuantity] = useState(\"\");\n  const [minAmountRaw, setMinAmountRaw] = useState(\"\");\n  const [minAmount, setMinAmount] = useState<bigint | null>(BigInt(0));\n  const [maxAmountRaw, setMaxAmountRaw] = useState(\"\");\n  const [maxAmount, setMaxAmount] = useState<bigint | null>(BigInt(0));\n\n  const [selectedToken, setSelectedToken] = useState(0);\n  const [tokenId, setTokenId] = useState(\"1\");\n\n  const [defaultAmountRaw, setDefaultAmountRaw] = useState(\"\");\n  const [defaultAmount, setDefaultAmount] = useState<bigint | null>(null);\n  const [addressesPerTransaction, setAddressesPerTransaction] = useState(\"200\");\n  const [toRaw, setToRaw] = useState(\"\");\n  const [toList, setToList] = useState<To[] | null>(null);\n  const [isGiving, setIsGiving] = useState(false);\n  const [givedAddresses, setGivedAddresses] = useState(0);\n  const [decimal, setDecimal] = useState(\"\");\n\n  const token = TOKENS[chain][selectedToken];\n\n  useEffect(\n    () => {\n      setDecimal(String(token.decimal));\n    // eslint-disable-next-line\n    }, [selectedToken, account, chain],\n  );\n\n  function updateToRaw(raw: string) {\n    setToRaw(raw);\n    setToList(parseAddresses(raw));\n  }\n\n  const isDefaultAmountNeeded = toList !== null && toList.some((to) => to.amount === null);\n  const isDefaultAmountInvalid = !defaultAmount && isDefaultAmountNeeded;\n\n  return (\n    <Container className=\"mt-4\">\n      <Row className=\"justify-content-center\">\n        <h1>Airdrop</h1>\n      </Row>\n      <Row className=\"justify-content-center mt-3\">\n        <InputGroup hasValidation>\n          <Form.Control\n            as=\"textarea\"\n            className=\"Home__Addresses\"\n            value={toRaw}\n            onChange={(e) => updateToRaw(e.currentTarget.value)}\n            isInvalid={toList === null}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Please provide valid addresses with/without amount.\n          </Form.Control.Feedback>\n        </InputGroup>\n      </Row>\n      <Row className=\"justify-content-center mt-3\">\n        <Col xs=\"12\" className=\"mt-3\">\n          <InputGroup>\n            <InputGroup.Text>Random addresses quantity</InputGroup.Text>\n            <Form.Control\n              value={randomAddressesQuantity}\n              placeholder=\"amount\"\n              onChange={\n                (e) => updateIntegerByStr(e.currentTarget.value, setRandomAddressesQuantity)\n              }\n            />\n          </InputGroup>\n        </Col>\n        <Col xs=\"12\" md=\"6\" className=\"mt-3\">\n          <InputGroup>\n            <InputGroup.Text>Min amount</InputGroup.Text>\n            <Form.Control\n              value={minAmountRaw}\n              placeholder=\"amount\"\n              onChange={(e) => updateAmountByStr(\n                e.currentTarget.value,\n                setMinAmountRaw,\n                setMinAmount,\n              )}\n            />\n          </InputGroup>\n        </Col>\n        <Col xs=\"12\" md=\"6\" className=\"mt-3\">\n          <InputGroup>\n            <InputGroup.Text>Max amount</InputGroup.Text>\n            <Form.Control\n              value={maxAmountRaw}\n              placeholder=\"amount\"\n              onChange={(e) => updateAmountByStr(\n                e.currentTarget.value,\n                setMaxAmountRaw,\n                setMaxAmount,\n              )}\n            />\n          </InputGroup>\n        </Col>\n        <Col xs=\"auto\" className=\"mt-3\">\n          <Button\n            onClick={() => {\n              assert(maxAmount && minAmount);\n              const result = [];\n              for (let i = 0; i < Number(randomAddressesQuantity); i += 1) {\n                const { address } = web3.eth.accounts.create();\n                const amount = BigInt(\n                  Math.floor(Number(maxAmount - minAmount) * Math.random()),\n                ) + minAmount;\n                result.push(`${address} ${fixedDecimalToStr(amount, Number(decimal))}`);\n              }\n              updateToRaw(result.join(\"\\n\"));\n            }}\n            disabled={!minAmount || !maxAmount || randomAddressesQuantity === \"\"}\n          >\n            Generate\n          </Button>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center mt-3\">\n        <Col xs=\"auto\">\n          <ButtonGroup>\n            {TOKENS[chain].map(({ id, name }) => (\n              <ToggleButton\n                key={id}\n                id={`token-${id}`}\n                name=\"tokens-radio\"\n                type=\"radio\"\n                variant=\"outline-primary\"\n                value={id}\n                checked={selectedToken === id}\n                onChange={(e) => setSelectedToken(Number(e.currentTarget.value))}\n              >\n                {name}\n              </ToggleButton>\n            ))}\n          </ButtonGroup>\n        </Col>\n        <Col xs=\"auto\" className={`${selectedToken === 3 ? \"\" : \"d-none\"}`}>\n          <ButtonGroup>\n            {SHARDS.map(({ id, name }) => (\n              <ToggleButton\n                key={id}\n                id={`shard-${id}`}\n                name=\"shards-radio\"\n                type=\"radio\"\n                variant=\"outline-primary\"\n                value={id}\n                checked={Number(tokenId) === id}\n                onChange={(e) => setTokenId(e.currentTarget.value)}\n              >\n                {name}\n              </ToggleButton>\n            ))}\n          </ButtonGroup>\n        </Col>\n        <Col xs=\"auto\" className={`${selectedToken === 4 ? \"\" : \"d-none\"}`}>\n          <InputGroup>\n            <InputGroup.Text>Token ID</InputGroup.Text>\n            <Form.Control\n              value={tokenId}\n              placeholder=\"Token ID\"\n              onChange={(e) => {\n                const { value } = e.currentTarget;\n                updateIntegerByStr(value, setTokenId);\n                if (value === \"0\") {\n                  setTokenId(value);\n                }\n              }}\n            />\n          </InputGroup>\n        </Col>\n        <Col xs=\"auto\" className=\"d-flex align-items-center\">\n          <p className=\"m-0\">\n            default decimal:&nbsp;\n            {token.decimal}\n          </p>\n        </Col>\n        <div className=\"w-100\" />\n        <Col xs=\"12\" md=\"6\" className=\"mt-3\">\n          <InputGroup hasValidation>\n            <InputGroup.Text>Default amount</InputGroup.Text>\n            <Form.Control\n              value={defaultAmountRaw}\n              placeholder=\"amount\"\n              onChange={(e) => updateAmountByStr(\n                e.currentTarget.value,\n                setDefaultAmountRaw,\n                setDefaultAmount,\n              )}\n              isInvalid={isDefaultAmountInvalid}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              Please provide amount for default.\n            </Form.Control.Feedback>\n          </InputGroup>\n        </Col>\n        <Col xs=\"12\" md=\"6\" className=\"mt-3\">\n          <InputGroup>\n            <InputGroup.Text>Addresses per transaction</InputGroup.Text>\n            <Form.Control\n              value={addressesPerTransaction}\n              placeholder=\"addresses number\"\n              onChange={\n                (e) => updateIntegerByStr(e.currentTarget.value, setAddressesPerTransaction)\n              }\n            />\n          </InputGroup>\n        </Col>\n        <Col xs=\"12\" className=\"mt-3\">\n          <InputGroup>\n            <InputGroup.Text>Decimal</InputGroup.Text>\n            <Form.Control\n              value={decimal}\n              placeholder=\"decimal\"\n              onChange={(e) => {\n                const { value } = e.currentTarget;\n                updateIntegerByStr(value, setDecimal);\n                if (value === \"0\") {\n                  setDecimal(value);\n                }\n              }}\n            />\n          </InputGroup>\n        </Col>\n        <Col xs=\"auto\" className=\"mt-3\">\n          <Button\n            variant=\"success\"\n            onClick={async () => {\n              setGivedAddresses(0);\n              setIsGiving(true);\n              try {\n                await airdrop(\n                  web3,\n                  chain,\n                  selectedToken,\n                  account,\n                  toList,\n                  defaultAmount,\n                  Number(decimal),\n                  setGivedAddresses,\n                  Number(addressesPerTransaction),\n                  selectedToken >= 3 ? BigInt(tokenId) : null,\n                );\n              } finally {\n                setIsGiving(false);\n              }\n            }}\n            disabled={\n              toList === null\n              || isDefaultAmountInvalid\n              || isGiving\n              || !toList.every((to) => web3.utils.isAddress(to.address))\n              || decimal === \"\"\n              || addressesPerTransaction === \"\"\n            }\n          >\n            <Spinner\n              as=\"span\"\n              animation=\"border\"\n              size=\"sm\"\n              role=\"status\"\n              aria-hidden=\"true\"\n              className={`me-1 ${isGiving ? \"\" : \"d-none\"}`}\n            />\n            Airdrop\n            <span className={isGiving ? \"\" : \"d-none\"}>\n              &nbsp;\n              {givedAddresses}\n              /\n              {toList?.length}\n            </span>\n          </Button>\n        </Col>\n      </Row>\n      <Row className=\"mt-3\">\n        <Col>\n          <Table>\n            <thead>\n              <tr>\n                <th>Address</th>\n                <th>Amount</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                toList\n                  ? toList.map((to) => (\n                    <tr>\n                      <td>\n                        {to.address}\n                        <span className={`ms-4 text-danger ${web3.utils.isAddress(to.address) ? \"d-none\" : \"\"}`}>\n                          Invalid address\n                        </span>\n                      </td>\n                      <td className={to.amount ? \"\" : \"text-secondary\"}>\n                        {\n                          (() => {\n                            if (to.amount) {\n                              return fixedDecimalToStr(to.amount, Number(decimal));\n                            }\n                            if (defaultAmount) {\n                              return fixedDecimalToStr(defaultAmount, Number(decimal));\n                            }\n                            return \"\";\n                          })()\n                        }\n                      </td>\n                    </tr>\n                  ))\n                  : []\n              }\n            </tbody>\n          </Table>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import React, {\n  useState,\n} from \"react\";\nimport assert from \"assert\";\n\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\n\nexport default function ToggleButtons(\n  {\n    selects,\n    groupName,\n    onChange,\n  }: {\n    selects: Array<{ id: number, value: number, name: string }>,\n    groupName: string,\n    onChange: (_: number) => void,\n  },\n): React.ReactElement {\n  const [selectedId, setSelectedId] = useState(0);\n  return (\n    <ButtonGroup className=\"flex-wrap\">\n      {selects.map(({ id, name }) => (\n        <ToggleButton\n          key={id}\n          id={`${groupName}-${id}`}\n          name={`${groupName}s-radio`}\n          type=\"radio\"\n          variant=\"outline-primary\"\n          value={id}\n          checked={selectedId === id}\n          onChange={(e) => {\n            const changeId = Number(e.currentTarget.value);\n            setSelectedId(changeId);\n            const select = selects.find((s) => s.id === changeId);\n            assert(select);\n            onChange(select.value);\n          }}\n        >\n          {name}\n        </ToggleButton>\n      ))}\n    </ButtonGroup>\n  );\n}\n","import React, {\n  useState,\n  useEffect,\n} from \"react\";\n\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Form from \"react-bootstrap/Form\";\n\nimport { updateAmountByStr, updateIntegerByStr } from \"../../utils/utils\";\n\nexport default function RangeInput(\n  {\n    text,\n    placeholder,\n    defaultValue,\n    min,\n    max,\n    onChange,\n    decimal,\n  }: {\n    text: string,\n    placeholder: string,\n    defaultValue: string,\n    min: bigint,\n    max: bigint | null,\n    onChange: (_: bigint | null) => void,\n    decimal?: number,\n  },\n): React.ReactElement {\n  const [raw, setRaw] = useState(defaultValue);\n  const [isInvalid, setIsInvalid] = useState(false);\n\n  function update(value: string) {\n    if (!decimal || decimal === 0) {\n      updateIntegerByStr(value, setRaw, (v) => {\n        if (v === null || v < min || (max !== null && max <= v)) {\n          onChange(null);\n          setIsInvalid(true);\n        } else {\n          onChange(v);\n          setIsInvalid(false);\n        }\n      });\n    } else {\n      updateAmountByStr(value, setRaw, (v) => {\n        if (\n          v === null\n          || v < min * BigInt(10 ** 18)\n          || (max !== null && max * BigInt(10 ** 18) <= v)\n        ) {\n          onChange(null);\n          setIsInvalid(true);\n        } else {\n          onChange((v * BigInt(10 ** decimal)) / BigInt(10 ** 18));\n          setIsInvalid(false);\n        }\n      });\n    }\n  }\n\n  // eslint-disable-next-line\n  useEffect(() => update(defaultValue), [defaultValue]);\n\n  return (\n    <InputGroup hasValidation>\n      <InputGroup.Text>{text}</InputGroup.Text>\n      <Form.Control\n        value={raw}\n        placeholder={placeholder}\n        onChange={\n          (e) => {\n            const { value } = e.currentTarget;\n            update(value);\n          }\n        }\n        isInvalid={isInvalid}\n      />\n    </InputGroup>\n  );\n}\n\nRangeInput.defaultProps = {\n  decimal: 0,\n};\n","import \"./NFT.scss\";\n\nimport React, { useState, useContext } from \"react\";\nimport Web3 from \"web3\";\nimport { AbiItem } from \"web3-utils\";\nimport assert from \"assert\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Row from \"react-bootstrap/Row\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Table from \"react-bootstrap/Table\";\n\nimport { BaseProvider } from \"@metamask/providers\";\n\nimport ToggleButtons from \"../../components/ToggleButtons/ToggleButtons\";\nimport RangeInput from \"../../components/RangeInput/RangeInput\";\n\nimport {\n  EthereumContext,\n  AccountContext,\n  ChainContext,\n  EMPTY_FUNCTION,\n} from \"../../utils/utils\";\n\nfunction parseAddresses(raw: string): string[] | null {\n  const toList: string[] = [];\n\n  const isValid = raw\n    .replaceAll(\",\", \" \")\n    .replaceAll(\"\\n\", \" \")\n    .replaceAll('\"', \"\")\n    .replaceAll(\"'\", \"\")\n    .replaceAll(\"`\", \"\")\n    .replaceAll(/  */g, \" \")\n    .trim()\n    .split(\" \")\n    .every((value) => {\n      if (!value.startsWith(\"0x\")) {\n        return false;\n      }\n      toList.push(value);\n      return true;\n    });\n\n  if (isValid) {\n    return toList;\n  }\n\n  return null;\n}\n\nconst CONTRACT_ABIS = [\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"owners\",\n        type: \"address[]\",\n      },\n      {\n        components: [\n          { internalType: \"uint256\", name: \"intentionQuality\", type: \"uint256\" },\n          { internalType: \"uint256\", name: \"intentionRange\", type: \"uint256\" },\n          { internalType: \"uint256\", name: \"level\", type: \"uint256\" },\n          { internalType: \"uint256\", name: \"skin\", type: \"uint256\" },\n        ],\n        internalType: \"struct CelestialManagerType.ForgeSupremeParam\",\n        name: \"param\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"specificValues\",\n        type: \"uint256[]\",\n      },\n    ],\n    name: \"forgeSupremeAuth\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address[]\", name: \"owners\", type: \"address[]\" },\n      { internalType: \"uint256\", name: \"intention\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"level\", type: \"uint256\" },\n      { internalType: \"uint256[]\", name: \"specificValues\", type: \"uint256[]\" },\n    ],\n    name: \"recruitCaptainAuth\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst NFTS = [\n  { id: 0, value: 0, name: \"Supreme\" },\n  { id: 1, value: 1, name: \"Captain\" },\n];\n\nconst QUALITIES = [\n  { id: 0, value: 0, name: \"Unknown\" },\n  { id: 1, value: 1, name: \"Common\" },\n  { id: 2, value: 2, name: \"Good\" },\n  { id: 3, value: 3, name: \"Excellent\" },\n  { id: 4, value: 4, name: \"Rare\" },\n  { id: 5, value: 5, name: \"Epic\" },\n  { id: 6, value: 6, name: \"Legendary\" },\n  { id: 7, value: 7, name: \"Limit\" },\n];\n\nconst INTENTIONS = [\n  { id: 0, value: 1, name: \"Min\" },\n  { id: 1, value: 2, name: \"Mean\" },\n  { id: 2, value: 3, name: \"Max\" },\n  { id: 3, value: 4, name: \"Random\" },\n  { id: 4, value: 5, name: \"Specific\" },\n];\n\nconst SUPREME_SPECIFIC_VALUES = [\n  {\n    id: 0,\n    name: \"exploitation\",\n    range: [[10, 41], [50, 121]],\n    decimal: 18,\n  },\n  {\n    id: 1,\n    name: \"exploitation percent\",\n    range: [[1, 3], [3, 6]],\n    decimal: 0,\n  },\n  {\n    id: 2,\n    name: \"attack\",\n    range: [[400, 1000], [1500, 3000]],\n    decimal: 18,\n  },\n  {\n    id: 3,\n    name: \"attack percent\",\n    range: [[1, 3], [3, 6]],\n    decimal: 0,\n  },\n  {\n    id: 4,\n    name: \"defense\",\n    range: [[100, 300], [500, 1000]],\n    decimal: 18,\n  },\n  {\n    id: 5,\n    name: \"defense percent\",\n    range: [[1, 3], [3, 6]],\n    decimal: 0,\n  },\n];\n\nconst CAPTAIN_SPECIFIC_VALUES = [\n  {\n    id: 0,\n    name: \"race\",\n    range: [1, 4],\n    decimal: 0,\n  },\n  {\n    id: 1,\n    name: \"luck\",\n    range: [10, 16],\n    decimal: 18,\n  },\n  {\n    id: 2,\n    name: \"accuracy\",\n    range: [60, 81],\n    decimal: 18,\n  },\n  {\n    id: 3,\n    name: \"dodge\",\n    range: [10, 21],\n    decimal: 18,\n  },\n  {\n    id: 4,\n    name: \"intelligence\",\n    range: [20, 26],\n    decimal: 18,\n  },\n];\n\nconst SKINS = [\n  { id: 0, name: \"Null\", value: 0 },\n  { id: 1, name: \"OKEX rare\", value: 1 },\n  { id: 2, name: \"OKEX epic\", value: 2 },\n  { id: 3, name: \"OKEX association\", value: 3 },\n  { id: 4, name: \"Fengyun\", value: 4 },\n  { id: 5, name: \"CMC\", value: 5 },\n  { id: 6, name: \"OKEX\", value: 6 },\n  { id: 7, name: \"Peter\", value: 7 },\n  { id: 8, name: \"Hyper Pay\", value: 8 },\n  { id: 9, name: \"Coin Wind\", value: 9 },\n  { id: 10, name: \"Panda Swap\", value: 10 },\n  { id: 11, name: \"IOTX\", value: 11 },\n  { id: 12, name: \"MARS\", value: 12 },\n  { id: 13, name: \"Onto\", value: 13 },\n  { id: 14, name: \"MAC\", value: 14 },\n  { id: 15, name: \"Christmas\", value: 15 },\n  { id: 16, name: \"Wing\", value: 16 },\n  { id: 17, name: \"OneCash\", value: 17 },\n  { id: 18, name: \"MOVE\", value: 18 },\n  { id: 19, name: \"Golff\", value: 19 },\n  { id: 20, name: \"Bitmart\", value: 20 },\n  { id: 21, name: \"element\", value: 21 },\n  { id: 22, name: \"MAC for Xmas special\", value: 22 },\n  { id: 23, name: \"Nabox\", value: 23 },\n  { id: 24, name: \"Ontology\", value: 24 },\n];\n\nconst SENDERS = [\"0xc443033Fa0822afCe3707bE4c084cD72c9f05666\"];\n\nfunction airdropMaintainer(\n  web3: Web3,\n  chain: number,\n  from: string | null,\n  toList: string[] | null,\n  quality: number,\n  intention: number,\n  level: number,\n  specificValues: Array<bigint | null>,\n  skin: number,\n  progressSetter: (_: number) => void,\n  limit: number,\n): Promise<void> {\n  if (!from || !toList || specificValues.some((e) => !e)) {\n    return Promise.resolve();\n  }\n\n  const contractInstance = new web3.eth.Contract(CONTRACT_ABIS as AbiItem[], SENDERS[chain]);\n\n  const airdrops = [];\n  let progress = 0;\n  for (let i = 0; i < toList.length; i += limit) {\n    const toSlice = toList.slice(i, i + limit);\n    airdrops.push(\n      // eslint-disable-next-line\n      contractInstance.methods\n        .forgeSupremeAuth(toSlice, [quality, intention, level, skin], specificValues)\n        .send({ from })\n        // eslint-disable-next-line\n        .then(() => {\n          progress += toSlice.length;\n          progressSetter(progress);\n        }),\n    );\n  }\n\n  return Promise.all(airdrops).then(EMPTY_FUNCTION);\n}\n\nfunction airdropCaptainMaintainer(\n  web3: Web3,\n  chain: number,\n  from: string | null,\n  toList: string[] | null,\n  intention: number,\n  level: number,\n  specificValues: Array<bigint | null>,\n  progressSetter: (_: number) => void,\n  limit: number,\n): Promise<void> {\n  if (!from || !toList || specificValues.some((e) => !e)) {\n    return Promise.resolve();\n  }\n\n  const contractInstance = new web3.eth.Contract(CONTRACT_ABIS as AbiItem[], SENDERS[chain]);\n\n  const airdrops = [];\n  let progress = 0;\n  for (let i = 0; i < toList.length; i += limit) {\n    const toSlice = toList.slice(i, i + limit);\n    airdrops.push(\n      // eslint-disable-next-line\n      contractInstance.methods\n        .recruitCaptainAuth(toSlice, intention, level, specificValues)\n        .send({ from })\n        // eslint-disable-next-line\n        .then(() => {\n          progress += toSlice.length;\n          progressSetter(progress);\n        }),\n    );\n  }\n\n  return Promise.all(airdrops).then(EMPTY_FUNCTION);\n}\n\nexport default function NFT(): React.ReactElement {\n  const ethereum = useContext<BaseProvider | null>(EthereumContext);\n  assert(ethereum);\n  // eslint-disable-next-line\n  const web3 = new Web3(ethereum as any);\n  const account = useContext<string | null>(AccountContext);\n  const chain = useContext<number>(ChainContext);\n\n  const [selectedNFT, setSelectedNFT] = useState(0);\n  const [selectedQuality, setSelectedQuality] = useState(40000);\n  const [selectedIntention, setSelectedIntention] = useState(1);\n  const [specificValues, setSpecificValues] = useState<Array<bigint | null>>([\n    null, null, null, null, null, null,\n  ]);\n  const [selectedSkin, setSelectedSkin] = useState(0);\n  const [level, setLevel] = useState<bigint | null>(null);\n  const [addressesPerTransaction, setAddressesPerTransaction] = useState<bigint | null>(BigInt(50));\n  const [toList, setToList] = useState<string[] | null>(null);\n  const [isGiving, setIsGiving] = useState(false);\n  const [givedAddresses, setGivedAddresses] = useState(0);\n\n  const specificValuesInvalid = (\n    selectedIntention === 5\n    && (\n      (selectedNFT === 0 && specificValues.slice(0, 6).some((e) => e === null))\n      || (\n        selectedNFT === 1\n        && specificValues.slice(0, 5).some((e) => e === null)\n      )\n    )\n  );\n\n  return (\n    <Container className=\"mt-4\">\n      <Row className=\"justify-content-center\">\n        <h1>NFT airdrop</h1>\n      </Row>\n      <Row className=\"justify-content-center mt-3\">\n        <InputGroup hasValidation>\n          <Form.Control\n            as=\"textarea\"\n            className=\"NFT__Addresses\"\n            onChange={(e) => setToList(parseAddresses(e.currentTarget.value))}\n            isInvalid={toList === null}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Please provide valid addresses.\n          </Form.Control.Feedback>\n        </InputGroup>\n      </Row>\n      <Row className=\"justify-content-center mt-3\">\n        <Col xs=\"auto\">\n          <ToggleButtons selects={NFTS} groupName=\"nft\" onChange={setSelectedNFT} />\n        </Col>\n        <Col xs=\"auto\" className={selectedNFT === 0 ? \"\" : \"d-none\"}>\n          <ToggleButtons selects={QUALITIES} groupName=\"quality\" onChange={setSelectedQuality} />\n        </Col>\n        <Col xs=\"auto\">\n          <ToggleButtons selects={INTENTIONS} groupName=\"intention\" onChange={setSelectedIntention} />\n        </Col>\n        <Col xs=\"12\" className={selectedNFT === 0 ? \"mt-3\" : \"d-none\"}>\n          <ToggleButtons selects={SKINS} groupName=\"skin\" onChange={setSelectedSkin} />\n        </Col>\n        <div className=\"w-100\" />\n        {\n          selectedIntention === 5\n          && selectedNFT === 0\n          && SUPREME_SPECIFIC_VALUES.map(({\n            id,\n            name,\n            range,\n            decimal,\n          }) => {\n            const [min, max] = selectedQuality === 40000 ? range[0] : range[1];\n            return (\n              <Col xs=\"12\" md=\"6\" className=\"mt-3\" key={id}>\n                <RangeInput\n                  text={name}\n                  placeholder={`${BigInt(min)} ~ ${BigInt(max)}`}\n                  defaultValue={String(min)}\n                  min={BigInt(min)}\n                  max={BigInt(max)}\n                  decimal={decimal}\n                  onChange={(v) => setSpecificValues((o) => {\n                    const result = [...o];\n                    result[id] = v;\n                    return result;\n                  })}\n                />\n              </Col>\n            );\n          })\n        }\n        {\n          selectedIntention === 5\n          && selectedNFT === 1\n          && CAPTAIN_SPECIFIC_VALUES.map(({\n            id,\n            name,\n            range,\n            decimal,\n          }) => {\n            const [min, max] = range;\n            return (\n              <Col xs=\"12\" md=\"6\" className=\"mt-3\" key={id}>\n                <RangeInput\n                  text={name}\n                  placeholder={`${BigInt(min)} ~ ${BigInt(max)}`}\n                  defaultValue={String(min)}\n                  min={BigInt(min)}\n                  max={BigInt(max)}\n                  decimal={decimal}\n                  onChange={(v) => setSpecificValues((o) => {\n                    const result = [...o];\n                    result[id] = v;\n                    return result;\n                  })}\n                />\n              </Col>\n            );\n          })\n        }\n        <div className=\"w-100\" />\n        <Col xs=\"12\" md=\"6\" className=\"mt-3\">\n          <RangeInput\n            text=\"Level\"\n            placeholder=\"level number\"\n            defaultValue=\"\"\n            min={BigInt(1)}\n            max={BigInt(31)}\n            onChange={setLevel}\n          />\n        </Col>\n        <Col xs=\"12\" md=\"6\" className=\"mt-3\">\n          <RangeInput\n            text=\"Addresses per transaction\"\n            placeholder=\"addresses number\"\n            defaultValue=\"50\"\n            min={BigInt(1)}\n            max={null}\n            onChange={setAddressesPerTransaction}\n          />\n        </Col>\n        <Col xs=\"auto\" className=\"mt-3\">\n          <Button\n            variant=\"success\"\n            onClick={async () => {\n              setGivedAddresses(0);\n              setIsGiving(true);\n              try {\n                if (selectedNFT === 0) {\n                  await airdropMaintainer(\n                    web3,\n                    chain,\n                    account,\n                    toList,\n                    selectedQuality,\n                    selectedIntention,\n                    Number(level),\n                    selectedIntention === 5 ? specificValues : [],\n                    selectedSkin,\n                    setGivedAddresses,\n                    Number(addressesPerTransaction),\n                  );\n                } else {\n                  await airdropCaptainMaintainer(\n                    web3,\n                    chain,\n                    account,\n                    toList,\n                    selectedIntention,\n                    Number(level),\n                    selectedIntention === 5 ? specificValues.slice(0, 5) : [],\n                    setGivedAddresses,\n                    Number(addressesPerTransaction),\n                  );\n                }\n              } finally {\n                setIsGiving(false);\n              }\n            }}\n            disabled={\n              toList === null\n              || isGiving\n              || !toList.every((to) => web3.utils.isAddress(to))\n              || !level\n              || specificValuesInvalid\n            }\n          >\n            <Spinner\n              as=\"span\"\n              animation=\"border\"\n              size=\"sm\"\n              role=\"status\"\n              aria-hidden=\"true\"\n              className={`me-1 ${isGiving ? \"\" : \"d-none\"}`}\n            />\n            Airdrop\n            <span className={isGiving ? \"\" : \"d-none\"}>\n              &nbsp;\n              {givedAddresses}\n              /\n              {toList?.length}\n            </span>\n          </Button>\n        </Col>\n      </Row>\n      <Row className=\"mt-3\">\n        <Col>\n          <Table>\n            <thead>\n              <tr>\n                <th>Address</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                toList\n                  ? toList.map((to) => (\n                    <tr>\n                      <td>\n                        {to}\n\n                        <span className={`ms-4 text-danger ${web3.utils.isAddress(to) ? \"d-none\" : \"\"}`}>\n                          Invalid address\n                        </span>\n                      </td>\n                    </tr>\n                  ))\n                  : []\n              }\n            </tbody>\n          </Table>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import React from \"react\";\n\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Box from \"./views/Box/Box\";\n\nimport Home from \"./views/Home/Home\";\nimport NFT from \"./views/NFT/NFT\";\n\nexport default function Routes(): React.ReactElement {\n  return (\n    <Switch>\n      <Route path=\"/nft\">\n        <NFT />\n      </Route>\n      <Route path=\"/home\">\n        <Home />\n      </Route>\n      <Route path=\"/box\">\n        <Box />\n      </Route>\n      <Route path=\"/\">\n        <Redirect to=\"/home\" />\n      </Route>\n    </Switch>\n  );\n}\n","import \"./App.scss\";\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { HashRouter, NavLink } from \"react-router-dom\";\n\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport { BaseProvider } from \"@metamask/providers\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Row from \"react-bootstrap/Row\";\n\nimport {\n  EthereumContext,\n  AccountContext,\n  ChainContext,\n  EMPTY_FUNCTION,\n} from \"./utils/utils\";\n\nimport Routes from \"./Routes\";\n\nconst ERROR_NETWORK_NOT_ADDED = 4902;\n\nconst CHAINS = [\n  {\n    chainId: \"0x42\",\n    chainName: \"OKExChain Mainnet\",\n    nativeCurrency: { name: \"OKT\", symbol: \"OKT\", decimals: 18 },\n    rpcUrls: [\"https://exchainrpc.okex.org\"],\n    blockExplorerUrls: [\"https://www.oklink.com/okexchain\"],\n  },\n  {\n    chainId: \"0x38\",\n    chainName: \"Binance Smart Chain\",\n    nativeCurrency: { name: \"BNB\", symbol: \"BNB\", decimals: 18 },\n    rpcUrls: [\"https://bsc-dataseed.binance.org\"],\n    blockExplorerUrls: [\"https://bscscan.com/\"],\n  },\n];\n\nasync function switchToChain(ethereum: BaseProvider, selectedChain: number) {\n  try {\n    await ethereum.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{ chainId: CHAINS[selectedChain].chainId }],\n    });\n  } catch (switchError) {\n    const { code }: { code: number } = switchError as { code: number };\n\n    if (code !== ERROR_NETWORK_NOT_ADDED) {\n      return code;\n    }\n  }\n\n  return null;\n}\n\nasync function prepareChain(\n  ethereum: BaseProvider,\n  selectedChain: number,\n  setSelectedChain: (_: number) => void,\n) {\n  if (selectedChain === -1) {\n    const chainId = await ethereum.request({ method: \"eth_chainId\" });\n    if (chainId === \"0x42\") {\n      setSelectedChain(0);\n      return 0;\n    }\n    if (chainId === \"0x38\") {\n      setSelectedChain(1);\n      return 1;\n    }\n  }\n  const toChain = selectedChain === -1 ? 0 : selectedChain;\n\n  const switched = await switchToChain(ethereum, toChain);\n  if (switched && switched !== ERROR_NETWORK_NOT_ADDED) {\n    return null;\n  }\n\n  try {\n    await ethereum.request({\n      method: \"wallet_addEthereumChain\",\n      params: [CHAINS[toChain]],\n    });\n  } catch (addError) {\n    return null;\n  }\n\n  if ((await switchToChain(ethereum, toChain)) === null) {\n    return toChain;\n  }\n\n  return null;\n}\n\nfunction App(): React.ReactElement {\n  const [ethereum, setEthereum] = useState<BaseProvider | null>(null);\n  const [account, setAccount] = useState<string | null>(null);\n  const [isOnChain, setIsOnChain] = useState(false);\n  const [selectedChain, setSelectedChain] = useState(-1);\n  const [currentChain, setCurrentChain] = useState(0);\n\n  detectEthereumProvider().then((provider) => {\n    (setEthereum as (_: unknown) => void)(provider);\n  }, EMPTY_FUNCTION);\n\n  const updateSelectedAccount = useCallback(() => {\n    if (!ethereum) {\n      return;\n    }\n\n    setAccount(ethereum.selectedAddress);\n  }, [ethereum]);\n  const updateChain = useCallback(() => {\n    if (!ethereum) {\n      return;\n    }\n\n    prepareChain(ethereum, -1, setSelectedChain).then((chainId) => {\n      setIsOnChain(chainId !== null);\n      if (chainId !== null) {\n        setCurrentChain(chainId);\n      }\n    }, EMPTY_FUNCTION);\n  }, [ethereum]);\n\n  function connect() {\n    if (!ethereum) {\n      return;\n    }\n    ethereum\n      .request({ method: \"eth_requestAccounts\" })\n      .then(updateSelectedAccount, EMPTY_FUNCTION);\n  }\n\n  useEffect(() => {\n    if (!ethereum) {\n      return EMPTY_FUNCTION;\n    }\n\n    ethereum\n      .request({ method: \"eth_accounts\" })\n      .then(updateSelectedAccount, EMPTY_FUNCTION);\n\n    ethereum.on(\"accountsChanged\", updateSelectedAccount);\n    ethereum.on(\"chainChanged\", updateChain);\n    return () => {\n      ethereum.removeListener(\"accountsChanged\", updateSelectedAccount);\n      ethereum.removeListener(\"chainChanged\", updateChain);\n    };\n  }, [ethereum, updateSelectedAccount, updateChain]);\n\n  useEffect(() => {\n    if (!ethereum) {\n      return;\n    }\n\n    prepareChain(ethereum, selectedChain, setSelectedChain).then((chainId) => {\n      setIsOnChain(chainId !== null);\n      if (chainId !== null) {\n        setCurrentChain(chainId);\n      }\n    }, EMPTY_FUNCTION);\n  }, [ethereum, selectedChain]);\n\n  if (!ethereum) {\n    return <div>You must installed MetaMask to use Celestial dashboard!</div>;\n  }\n\n  if (!isOnChain) {\n    return <div>You are not on chain!</div>;\n  }\n\n  if (!account) {\n    return (\n      <Container>\n        <Row className=\"justify-content-center\">\n          <Col xs=\"auto\">\n            You must connect to MetaMask to use Celestial dashboard!\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <Col xs=\"auto\">\n            <Button onClick={() => connect()}>Connect</Button>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  return (\n    <EthereumContext.Provider value={ethereum}>\n      <AccountContext.Provider value={account}>\n        <ChainContext.Provider value={currentChain}>\n          <HashRouter>\n            <Navbar>\n              <Container>\n                <Nav className=\"align-items-center\">\n                  <NavLink to=\"/home\" className=\"me-3 text-decoration-none\">\n                    Airdrop\n                  </NavLink>\n                  <NavLink\n                    to=\"/nft\"\n                    className=\"me-3 text-decoration-none text-nowrap\"\n                  >\n                    NFT airdrop\n                  </NavLink>\n                  <NavLink to=\"/box\" className=\"me-3 text-decoration-none\">\n                    Box\n                  </NavLink>\n                  <Form.Select\n                    defaultValue=\"0\"\n                    value={selectedChain}\n                    onChange={(e) => setSelectedChain(Number(e.target.value))}\n                  >\n                    <option value=\"0\">OKEx</option>\n                    <option value=\"1\">BSC</option>\n                  </Form.Select>\n                </Nav>\n                <Navbar.Brand>{account}</Navbar.Brand>\n              </Container>\n            </Navbar>\n            <Routes />\n          </HashRouter>\n        </ChainContext.Provider>\n      </AccountContext.Provider>\n    </EthereumContext.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}